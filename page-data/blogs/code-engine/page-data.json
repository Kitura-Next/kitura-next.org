{"componentChunkName":"component---src-templates-blogs-js","path":"/blogs/code-engine","result":{"data":{"blog":{"html":"<h1 id=\"kitura-on-code-engine\"><a href=\"#kitura-on-code-engine\" aria-label=\"kitura on code engine permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura on Code Engine</h1>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>IBM recently opens in beta the new <a href=\"https://cloud.ibm.com/codeengine/overview\">Code Engine</a>.\nIt is a new serverless approach, based on Kubernetes,\nthat runs docker images, or even build your own code,\nto run on the cloud.\nIt takes seconds, according to the docs,\nand not more than minutes, according to my tests, to go live!</p>\n<blockquote>\n<p>Today, we are gonna to launch this blog post, with Kitura, hosted on the Code Engine!</p>\n</blockquote>\n<p>Keep in mind, that the service is still in beta, and is not (yet) ready for production.\nIf you were not convinced by the warning,\nafter 7 days, your engine will be removed completely (thanks to the beta mode!).\nIs it then too early to try it? No!</p>\n<h2 id=\"kitura\"><a href=\"#kitura\" aria-label=\"kitura permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura</h2>\n<p>The first step will be to create a very simple Kitura server,\nto serve our Markdown content.</p>\n<p>Kitura recently move from an IBM-hosted project, to a community driven project.\nYou can see the announcement <a href=\"http://www.kitura.dev/blogs/announcing-kitura-community\">here</a>.\nIf you want to build something more complex or that suits more your needs,\nhave a look at the Kitura <a href=\"https://www.kitura.dev\">documentation</a>.\nIf you already have a Kitura application (or another...),\nyou can skip directly to the Host secion.</p>\n<p>The first step is to create the Kitura server:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> blog\n<span class=\"token builtin class-name\">cd</span> blog\nswift package init --type<span class=\"token operator\">=</span>executable</code></pre></div>\n<p>This creates a barebone skeleton of a Swift application.\nIf you were to type:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">swift run</code></pre></div>\n<p>The result would be: <code class=\"language-text\">Hello, world!</code>.\nEnjoy! It means your Swift environment is setup properly!</p>\n<p>Now, let's add Kitura to it!</p>\n<p>Add the following line to your <code class=\"language-text\">Package.swift</code></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/Kitura/Kitura\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2.9.1\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and don't forget to add Kitura as a dependency of the <code class=\"language-text\">blog</code> target.\nRun your code again: nothing is changing in the result, but a few packages are downloaded!</p>\n<h2 id=\"serve-pages\"><a href=\"#serve-pages\" aria-label=\"serve pages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serve page(s)</h2>\n<p>Kitura is now fully added to your application, and ready to be used.\nOpen the <code class=\"language-text\">main.swift</code> file, and replace its content by the simplest serving endpoint.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Kitura</span>\n\n<span class=\"token keyword\">let</span> router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Kitura</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHTTPServer</span><span class=\"token punctuation\">(</span>onPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> router<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">Kitura</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Re-run the code. Your server is up and running, and waiting for requests.</p>\n<p>Open another terminal, and query your endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> localhost:8080</code></pre></div>\n<p>You should see the usual <code class=\"language-text\">Hello, world</code>, but this time served through a request!\nWhat an achievement for so few lines.\nFrom here on, feel free to play a bit with Kitura and add new routes if needed!\n(Again, the new documentation is <a href=\"https://www.kitura.dev\">here</a>)</p>\n<h2 id=\"markdown\"><a href=\"#markdown\" aria-label=\"markdown permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Markdown</h2>\n<p>We are serving this markdown document.\nThere is a lot of option, but\nKitura comes with a complete engine for that.\nIn order to serve Markdown into HTML, Kitura needs to use the Kitura-Markdown package.\nAdd the dependency in your <code class=\"language-text\">Package.swift</code> and in the target.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"KituraMarkdown\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/Kitura/Kitura-Markdown\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.1.2\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we specify the name of the package, as it is problematic with the latest version of Swift.</p>\n<p>Now, create a <code class=\"language-text\">Views</code> folder on the top level directory, and add your Markdown file inside.</p>\n<p>Go to the <code class=\"language-text\">main.swift</code> file, and add a new route to server your new blog entry:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/code-engine\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code-engine.md\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Restart your server, and hit <code class=\"language-text\">http://localhost:8080/code-engine</code> from your favorite browser.\nYou should see your blog post fully served in HTML!</p>\n<blockquote>\n<p>If you want, you could also serve the article into the root endpoint.</p>\n</blockquote>\n<p>Add some customization to your page if you want, like syntax highliting and/or font/colors!</p>\n<h2 id=\"host\"><a href=\"#host\" aria-label=\"host permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Host</h2>\n<p>Let do the fun part: hosting on Code Engine.\nI will skip all the steps to create an IBM Cloud account, there is already many good tutorial, and it is quite simple.\nThe whole tutorial is eligible to the free tier, so you shouldn't have to pay to try it!</p>\n<p>I will use the CLI quite often, as it makes it easier to follow I think.\nIf you haven't installed the IBM Cloud CLI, you can do it <a href=\"https://cloud.ibm.com/docs/cli?topic=cli-install-ibmcloud-cli\">now</a>,\nand install the <a href=\"https://cloud.ibm.com/codeengine/cli\">Code Engine plugin</a>.\nI will move directly to the core part.</p>\n<blockquote>\n<p>Currently, Code Engine is only working on the US-South region.\nMake sure your environment is set properly before continuing:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud target -r us-south</code></pre></div>\n<blockquote>\n<p>You also need to be sure, that the Organization, Space and Resource group are set (or at least that you have one).</p>\n</blockquote>\n<p>When using Code Engine, you have 2 options: a Docker image or running from the source code.\nBoth use the same initial configuration that we will detailled here.</p>\n<p>For the Code Engine to work, we need a project to host it.\nThis can be create with the CLI easily:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce project create --name blog-ce\nibmcloud ce project <span class=\"token keyword\">select</span> --name blog-ce</code></pre></div>\n<p>If <code class=\"language-text\">select</code> is failing, it is because the project is not yet ready.\nYou can confirm its status by hitting:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce project get --name blog-ce</code></pre></div>\n<h3 id=\"docker-image\"><a href=\"#docker-image\" aria-label=\"docker image permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker image</h3>\n<h4 id=\"make-the-image\"><a href=\"#make-the-image\" aria-label=\"make the image permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Make the image</h4>\n<p>That's the easiest method: host an image somewhere and run it through Code Engine.\nFor Kitura, there is a 2 stages Docker process, that can be generated by the Kitura CLI if you use it.\nOtherwise, the Docker files are that simple:</p>\n<p>The <code class=\"language-text\">Dockerfile-tools</code>:\nIt is used to compile the code, with the compilation dependency in a bigger environment.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM swift:5.3\nLABEL maintainer=&quot;M. Barnachon&quot;\nLABEL Description=&quot;Dockerfile for the Blog Code Engine builder.&quot;\n\n# We can replace this port with what the user wants\nEXPOSE 8080\n\n# Default user if not provided\nARG bx_dev_user=root\nARG bx_dev_userid=1000\n\n# Include base Kitura dependencies\nRUN apt-get update &amp;&amp; apt-get install -y sudo libssl-dev libcurl4-openssl-dev locales locales-all libz-dev &amp;&amp; apt-get clean\n\n# Add utils files\nADD https://raw.githubusercontent.com/IBM-Swift/swift-ubuntu-docker/master/utils/tools-utils.sh /swift-utils/tools-utils.sh\nADD https://raw.githubusercontent.com/IBM-Swift/swift-ubuntu-docker/master/utils/common-utils.sh /swift-utils/common-utils.sh\nRUN chmod -R 755 /swift-utils\n\n# Create user if not root\nRUN if [ &quot;$bx_dev_user&quot; != root ]; then useradd -ms /bin/bash -u $bx_dev_userid $bx_dev_user; fi\n\n# Bundle application source &amp; binaries\nCOPY . /swift-project</code></pre></div>\n<p>The <code class=\"language-text\">Dockerfile</code>:\nIt is used to run your server in production mode.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM swift:5.3-slim\nLABEL maintainer=&quot;M. Barnachon&quot;\nLABEL Description=&quot;Dockerfile for the Blog Code Engine server.&quot;\n\n# We can replace this port with what the user wants\nEXPOSE 8080\n\n# Default user if not provided\nARG bx_dev_user=root\nARG bx_dev_userid=1000\n\n# Add utils files\nADD https://raw.githubusercontent.com/IBM-Swift/swift-ubuntu-docker/master/utils/run-utils.sh /swift-utils/run-utils.sh\nADD https://raw.githubusercontent.com/IBM-Swift/swift-ubuntu-docker/master/utils/common-utils.sh /swift-utils/common-utils.sh\nRUN chmod -R 755 /swift-utils\n\n# Create user if not root\nRUN if [ $bx_dev_user != &quot;root&quot; ]; then useradd -ms /bin/bash -u $bx_dev_userid $bx_dev_user; fi\n\n# Bundle application source &amp; binaries\nCOPY . /swift-project\n\n# Command to start Swift application\nCMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;cd /swift-project &amp;&amp; .build-ubuntu/release/blog-ce&quot; ]</code></pre></div>\n<p>Then, copy, build and run like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t blog-ce-build -f Dockerfile-tools <span class=\"token builtin class-name\">.</span>\ndocker run -v <span class=\"token environment constant\">$PWD</span>:/swift-project -w /swift-project blog-ce-build /swift-utils/tools-utils.sh build release\ndocker build -t blog-ce-run --squash -f Dockerfile <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>Once your server image is build, you can host it on Docker Hub or the IBM registry.\nHere, we will be using the IBM cloud registry, as there is a free tier.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud cr login\nibmcloud cr namespace-add blog\ndocker tag blog-ce-run:latest blog-ce:0.0.1\ndocker tag blog-ce:0.0.1 us.icr.io/blog/blog-ce:0.0.1\ndocker push us.icr.io/blog/blog-ce:0.0.1</code></pre></div>\n<ol>\n<li>We log on the Container registry.</li>\n<li>We create a new namespace on the Container registry.</li>\n<li>We tag the image with the running name.</li>\n<li>We tag the image to be pushed on the Container registry.</li>\n<li>We push the image on the registry.</li>\n</ol>\n<h4 id=\"accessing-the-private-registry\"><a href=\"#accessing-the-private-registry\" aria-label=\"accessing the private registry permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accessing the private registry</h4>\n<p>In that example, we are using a private registry.\nYou then need to grant access to that registry within Code Engine.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud iam api-key-create cliapikey -d <span class=\"token string\">\"My CLI API key\"</span> --file key_file\nibmcloud ce registry create --name blog --server us.icr.io --username iamapikey --password-from-file key_file</code></pre></div>\n<ol>\n<li>Creates an IAM API key to use with the Command Line Interface.</li>\n<li>Grant Code Engine the access to the Container registry.\nDon't forget to set the password into a file named <code class=\"language-text\">key_file</code>.\nThis step tends to fail for various reasons. In that case, go through the web UI, and add the registry manually when creating the application.</li>\n</ol>\n<blockquote>\n<p>The file `key_file, if used, should be excluded from the next Docker image creation!</p>\n</blockquote>\n<h4 id=\"create-the-application\"><a href=\"#create-the-application\" aria-label=\"create the application permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create the application</h4>\n<p>You are now ready to deploy your application.\nStill using the command line (if the step 2 did succeed for you),\ncreate a new application running your Kitura image:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce application create --name blog --image us.icr.io/blog:0.0.1</code></pre></div>\n<p>Monitor the status of your application with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce application list</code></pre></div>\n<p>Once it is running, you can query the URL with the detail access to the application:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce application get -n blog</code></pre></div>\n<p>and point your browser to it!\nDon't forget to add the endpoint, if you have one, like <code class=\"language-text\">/code-engine</code>.</p>\n<p>Congratulation! Your new blog is online!</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>It was easy to host a simple page, using Kitura and IBM Code Engine.\nKeep in mind that this is still in beta phase, and it can break anytime.\nI actually re-try multiple times some commands, as they seems to failed for no obvious reason.\nMy go-to to fix it, was to remove completely the Code Engine project and redo all the steps.\nSometimes also, the command line is failing, but the web UI does work.\nAlternating the two, usually, allow me to succeed.</p>\n<p>We haven't detailed the build approach through Code Engine, as it involves solving the double Docker file approach.</p>\n<p>The source code (with extra adjustment) can be found <a href=\"https://github.com/mbarnach/blog-ce\">here</a>.</p>\n<p>I hope you've enjoyed that post, and feel free to play more with Kitura!</p>\n<p>Mathieu</p>","frontmatter":{"path":"/blogs/code-engine","title":"Kitura on Code Engine","author":"Mathieu Barnachon","date":"2020-09-26"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}