{"componentChunkName":"component---src-templates-docs-js","path":"/docs/authentication/jwt","result":{"data":{"docs":{"html":"<h1 id=\"json-web-token-authentication\"><a href=\"#json-web-token-authentication\" aria-label=\"json web token authentication permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON Web Token Authentication</h1>\n<p>A JSON Web Token (JWT) defines a compact and self-contained way for securely transmitting information between parties as a JSON object. You can find out more about JWTs at <a href=\"https://jwt.io/\">JWT.IO</a>.</p>\n<p><a href=\"https://github.com/IBM-Swift/Swift-JWT\">Swift-JWT</a> is our implementation of JSON Web Token using Swift. It allows you to create, sign and verify JWTs on iOS, macOS and Linux using a range of algorithms.  <a href=\"https://github.com/IBM-Swift/Kitura-CredentialsJWT\">Kitura-CredentialsJWT</a> is a JWT plugin to use with the existing Kitura-Credentials package that offers both Codable and Raw routing methods for easily authenticating JWTs. This guide will demonstrate how to use Swift-JWT and Kitura-CredentialsJWT to implement Single Sign On (SSO) authentication for your Kitura routes. This will allow a user to sign in once and then to access resources from other routes without having to repeat the authentication process.</p>\n<hr>\n<h2 id=\"step-1-create-the-jwt-routes\"><a href=\"#step-1-create-the-jwt-routes\" aria-label=\"step 1 create the jwt routes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Create the JWT routes</h2>\n<p>To use JWTs from a server, we need to add <a href=\"https://github.com/IBM-Swift/Kitura-CredentialsJWT#add-dependencies\">Kitura-CredentialsJWT</a> to our dependencies.</p>\n<blockquote>\n<p>If you don't have a server, follow our <a href=\"../getting-started/create-server-cli\">Create a server</a> guide.</p>\n</blockquote>\n<p>Once we have added Kitura-CredentialsJWT, we need a file for our JWT routes.</p>\n<p>Firstly, open your <code class=\"language-text\">Application.swift</code> file in your default text editor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Application.swift</code></pre></div>\n<p>Inside the <code class=\"language-text\">postInit()</code> function add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">initializeJWTRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Create a new file, called <code class=\"language-text\">JWTRoutes.swift</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Routes/JWTRoutes.swift</code></pre></div>\n<p>Open your <code class=\"language-text\">JWTRoutes.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">open <span class=\"token builtin\">Sources</span><span class=\"token operator\">/</span><span class=\"token builtin\">Application</span><span class=\"token operator\">/</span><span class=\"token builtin\">Routes</span><span class=\"token operator\">/</span><span class=\"token builtin\">JWTRoutes</span><span class=\"token punctuation\">.</span>swift</code></pre></div>\n<p>Inside this file, add the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Foundation</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraContracts</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsJWT</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeJWTRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtlogin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n        <span class=\"token comment\">// Read credentials and generate JWT here</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Define JWT signer and verifier here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code imports our required modules, sets up the framework for a routes page and defines the two raw routes that we will use in our guide.</p>\n<hr>\n<h2 id=\"step-2-set-up-your-signing-and-verifying-algorithm\"><a href=\"#step-2-set-up-your-signing-and-verifying-algorithm\" aria-label=\"step 2 set up your signing and verifying algorithm permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Set up your signing and verifying algorithm</h2>\n<p>Swift-JWT supports multiple algorithms for signing and verifying JWTs as defined by RFC7518. This is implemented by creating a <code class=\"language-text\">JWTSigner</code> and <code class=\"language-text\">JWTVerifier</code> struct with a required credentials.</p>\n<p>The algorithms are as follows:</p>\n<ul>\n<li><a href=\"./jwt-hmac\">HMAC</a></li>\n<li><a href=\"./jwt-ecdsa\">ECDSA</a></li>\n<li><a href=\"./jwt-rsa\">RSA</a></li>\n</ul>\n<blockquote>\n<p>Follow one of the links above to configure your signing and verifying algorithm before continuing with the rest of this guide.</p>\n</blockquote>\n<hr>\n<h2 id=\"step-3-define-a-model-to-represent-the-users-credentials\"><a href=\"#step-3-define-a-model-to-represent-the-users-credentials\" aria-label=\"step 3 define a model to represent the users credentials permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Define a model to represent the user's credentials</h2>\n<p>For the initial authentication, the user will have to provide their username and password. This could be achieved with basic authentication, the <code class=\"language-text\">Authorization</code> header or in the body of a <code class=\"language-text\">POST</code> request. In this guide we will pass the username and password in the body of a <code class=\"language-text\">POST</code> request and use a model to represent this.</p>\n<blockquote>\n<p>Passwords and JWTs with sensitive data must be kept private and should always be exchanged over a secure layer like HTTPS.</p>\n</blockquote>\n<p>Create a new file, called <code class=\"language-text\">UserCredentials.swift</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Models/UserCredentials.swift</code></pre></div>\n<p>Open your <code class=\"language-text\">UserCredentials.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Models/UserCredentials.swift</code></pre></div>\n<p>Inside this file we define our <code class=\"language-text\">UserCredentials</code> model:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-4-authenticate-the-user\"><a href=\"#step-4-authenticate-the-user\" aria-label=\"step 4 authenticate the user permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Authenticate the User</h2>\n<p>We need to read the user's credentials in our <code class=\"language-text\">POST</code> route so they can be authenticated.</p>\n<p>Inside the <code class=\"language-text\">POST</code> route add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Users credentials are authenticated</span></code></pre></div>\n<p>At this stage, you would normally hash the password and verify it against a database. However, for simplicity, we are going to assume the user successfully logged in.</p>\n<hr>\n<h2 id=\"step-5-create-the-signed-jwt\"><a href=\"#step-5-create-the-signed-jwt\" aria-label=\"step 5 create the signed jwt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5: Create the signed JWT</h2>\n<p>A JWT contains claims about the user that we want include in subsequent requests. You can specify any information as a claim, however there are \"Registered Claims\" which have a pre-defined meaning:</p>\n<ul>\n<li><code class=\"language-text\">iss</code>: The issuer of the token.</li>\n<li><code class=\"language-text\">sub</code>: The subject of the token.</li>\n<li><code class=\"language-text\">aud</code>: The audience of the token.</li>\n<li><code class=\"language-text\">exp</code>: The expiration time which MUST be after the current date/time.</li>\n<li><code class=\"language-text\">nbf</code>: Defines the time before which the JWT MUST NOT be accepted for processing.</li>\n<li><code class=\"language-text\">iat</code>: The time the JWT was issued. Can be used to determine the age of the JWT.</li>\n<li><code class=\"language-text\">jti</code>: Unique identifier for the JWT. Can be used to prevent the JWT from being replayed.</li>\n</ul>\n<p>Swift-JWT comes with a struct representing these Registered Claims which we will use for our example.</p>\n<p>Inside the <code class=\"language-text\">POST</code> route, beneath the code where we authenticated the user, initialize the user's claims:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> myClaims <span class=\"token operator\">=</span> <span class=\"token function\">ClaimsStandardJWT</span><span class=\"token punctuation\">(</span>iss<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">:</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>timeIntervalSinceNow<span class=\"token punctuation\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The claims information tells us the username which is the <code class=\"language-text\">subject</code> of the token, that they were authenticated by Kitura and that the token will expire in one hour.</p>\n<p>Next, we will initialize our JWT:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> myJWT <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">:</span> myClaims<span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can sign this JWT using the <code class=\"language-text\">JWTSigner</code> we created in step 2:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> myJWT<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtSigner<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally we return the signed JWT string to the user:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>signedJWT<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Our completed login route should look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtlogin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Users credentials are authenticated</span>\n    <span class=\"token keyword\">let</span> myClaims <span class=\"token operator\">=</span> <span class=\"token function\">ClaimsStandardJWT</span><span class=\"token punctuation\">(</span>iss<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">:</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>timeIntervalSinceNow<span class=\"token punctuation\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> myJWT <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">:</span> myClaims<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> myJWT<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtSigner<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>signedJWT<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-6-test-the-jwt-creation\"><a href=\"#step-6-test-the-jwt-creation\" aria-label=\"step 6 test the jwt creation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 6: Test the JWT creation</h2>\n<p>Compile your project and start the server.</p>\n<p>To test the route using curl, open Terminal and enter the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X POST \\\n    http://localhost:8080/jwtlogin \\\n    -H &#39;content-type: application/json&#39; \\\n    -d &#39;{\n    &quot;username&quot;: &quot;Joe Bloggs&quot;,\n    &quot;password&quot;: &quot;password&quot;\n}&#39;</code></pre></div>\n<p>You should be returned a JWT string that is structured xxxx.yyyy.zzzz where xxxx is the base64 encoded header, yyyy is the base 64 encoded claims and zzzz is the signature.</p>\n<p>Below is an example JWT, generated using <code class=\"language-text\">HS256</code> with the password \"kitura\". The one returned by your curl request will have different values but the same structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJLaXR1cmEiLCJzdWIiOiJKb2UgQmxvZ2dzIiwiZXhwIjoxNTUzMDE4Mjg0LjMyOTcwMTl9.t55WealACtYGCQGS3EQgRQuurmNSBO5fWZqzqJjEIi</code></pre></div>\n<p>We can decode the JWT string using the debugger at <a href=\"https://jwt.io\">jwt.io</a> which allows us view the headers and claims.</p>\n<hr>\n<h2 id=\"step-7-verify-a-jwt\"><a href=\"#step-7-verify-a-jwt\" aria-label=\"step 7 verify a jwt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 7: Verify a JWT</h2>\n<p>So far, we have created a signed JWT, which allows a user to authenticate themselves. At this stage, the user would attach the JWT string to future requests either using cookies or the <code class=\"language-text\">Authorization</code> header. When we receive this JWT string on other routes, we need to verify that we signed it and it hasn't been altered.</p>\n<p>From here we will use the CredentialsJWT plugin for authenticating the user with the earlier received token.</p>\n<p>After the <code class=\"language-text\">POST</code> function, add the following to the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> jwtCredentials <span class=\"token operator\">=</span> <span class=\"token builtin\">CredentialsJWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>verifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtVerifier<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> authenticationMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">Credentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nauthenticationMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">:</span> jwtCredentials<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtprotected\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> authenticationMiddleware<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtprotected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> userProfile <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>userProfile <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">verbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed raw token authentication\"</span><span class=\"token punctuation\">)</span>\n                response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>userProfile<span class=\"token punctuation\">.</span>id<span class=\"token delimiter variable\">)</span></span>\\n\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's break these lines down individually. The first line creates a CredentialsJWT instance with the default options using the built in <code class=\"language-text\">ClaimsStandardJWT</code> claims from the Swift-JWT package.  The second line creates the middleware instance using the Credentials package that we can register plugins to.  The third line registers the created CredentialsJWT instance to the created middleware instance and the line after adds a <code class=\"language-text\">GET</code> route to the router that allows an <code class=\"language-text\">authentication</code> request to take place.  The final line is the declaration of the function that will verify the JWT we send, if the request is authorized, then the response sent is the <code class=\"language-text\">id</code> field of your JWT.</p>\n<hr>\n<h2 id=\"step-8-test-the-protected-route\"><a href=\"#step-8-test-the-protected-route\" aria-label=\"step 8 test the protected route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 8: Test the protected Route</h2>\n<p>To test this, restart your server and send the <code class=\"language-text\">POST</code> request from Step 6.</p>\n<p>Copy the returned JWT string and paste it into the following curl request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET \\\nhttp://localhost:8080/jwtprotected \\\n-H &#39;X-Token-Type: JWT&#39; \\\n-H &#39;Authorization: Bearer &lt;Your JWT string here&gt;&#39;</code></pre></div>\n<p>You should see your username returned to you. This should look something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Joe Bloggs</code></pre></div>\n<p>Congratulations! We have just created a JWT single sign on system using a Kitura Server. Your completed <code class=\"language-text\">JWTRoutes.swift</code> file for <code class=\"language-text\">HS256</code> should look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Foundation</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraContracts</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsJWT</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftJWT</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Credentials</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">LoggerAPI</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeJWTRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtlogin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Users credentials are authenticated</span>\n        <span class=\"token keyword\">let</span> myClaims <span class=\"token operator\">=</span> <span class=\"token function\">ClaimsStandardJWT</span><span class=\"token punctuation\">(</span>iss<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Kitura\"</span><span class=\"token punctuation\">,</span> sub<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> exp<span class=\"token punctuation\">:</span> <span class=\"token function\">Date</span><span class=\"token punctuation\">(</span>timeIntervalSinceNow<span class=\"token punctuation\">:</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">var</span> myJWT <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">:</span> myClaims<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> myJWT<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtSigner<span class=\"token punctuation\">)</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>signedJWT <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> jwtCredentials <span class=\"token operator\">=</span> <span class=\"token builtin\">CredentialsJWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>verifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtVerifier<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> authenticationMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">Credentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    authenticationMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">:</span> jwtCredentials<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtprotected\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> authenticationMiddleware<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtprotected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> userProfile <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>userProfile <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">verbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed raw token authentication\"</span><span class=\"token punctuation\">)</span>\n                response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n        response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>userProfile<span class=\"token punctuation\">.</span>id<span class=\"token delimiter variable\">)</span></span>\\n\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Define JWT signer and verifier here</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> jwtSigner <span class=\"token operator\">=</span> <span class=\"token builtin\">JWTSigner</span><span class=\"token punctuation\">.</span><span class=\"token function\">hs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kitura\"</span><span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> jwtVerifier <span class=\"token operator\">=</span> <span class=\"token builtin\">JWTVerifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">hs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kitura\"</span><span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-9-using-custom-claims-optional\"><a href=\"#step-9-using-custom-claims-optional\" aria-label=\"step 9 using custom claims optional permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 9: Using custom claims (Optional)</h2>\n<p>You may want to use your own set of custom claims for your JWT.  For this to work, we need to specify the <code class=\"language-text\">subject</code> and <code class=\"language-text\">UserProfileDelegate</code> options.</p>\n<p>First we will create our claims structure, in our <code class=\"language-text\">JWTRoutes.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyClaims</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Claims</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">let</span> fullName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n  <span class=\"token keyword\">let</span> email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we need to edit our <code class=\"language-text\">UserCredentials</code> model to contain these additional values, so go into your <code class=\"language-text\">UserCredentials.swift</code> file and add these values to your model:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> username<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">let</span> fullName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>For simplicity, in this example, the id will have the same value as the username.</p>\n</blockquote>\n<p>We need to rewrite our JWT generation so that it creates a JWT with the correct claims:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtlogin\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UserCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Users credentials are authenticated</span>\n    <span class=\"token keyword\">let</span> myClaims <span class=\"token operator\">=</span> <span class=\"token function\">MyClaims</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> fullName<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">.</span>fullName<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">:</span> credentials<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> myJWT <span class=\"token operator\">=</span> <span class=\"token function\">JWT</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">:</span> myClaims<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> signedJWT <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> myJWT<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtSigner<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>signedJWT<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's test our newly created route!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X POST \\\n    http://localhost:8080/jwtlogin \\\n    -H &#39;content-type: application/json&#39; \\\n    -d &#39;{\n    &quot;username&quot;: &quot;JoeBloggs312&quot;,\n    &quot;password&quot;: &quot;password&quot;,\n    &quot;email&quot;: &quot;joebloggs@email.com&quot;,\n    &quot;fullName&quot;: &quot;Joe Kitura Bloggs&quot;\n}&#39;</code></pre></div>\n<p>None of these claims are part of the <code class=\"language-text\">ClaimsStandardJWT</code> claims and the <code class=\"language-text\">subject</code> claim is not present, therefore we need to use the <code class=\"language-text\">UserProfileDelegate</code> and update it with our custom claims.</p>\n<p>After our <code class=\"language-text\">POST</code> route, add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyDelegate</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">UserProfileDelegate</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>userProfile<span class=\"token punctuation\">:</span> <span class=\"token builtin\">UserProfile</span><span class=\"token punctuation\">,</span> from dictionary<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">Any</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// `userProfile.id` already contains `id`</span>\n        userProfile<span class=\"token punctuation\">.</span>displayName <span class=\"token operator\">=</span> dictionary<span class=\"token punctuation\">[</span><span class=\"token string\">\"fullName\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span> <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">String</span>\n        <span class=\"token keyword\">let</span> email <span class=\"token operator\">=</span> <span class=\"token builtin\">UserProfile</span><span class=\"token punctuation\">.</span><span class=\"token function\">UserProfileEmail</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> dictionary<span class=\"token punctuation\">[</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span> <span class=\"token keyword\">as</span><span class=\"token operator\">!</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"home\"</span><span class=\"token punctuation\">)</span>\n        userProfile<span class=\"token punctuation\">.</span>emails <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>email<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we need to declare our instance of CredentialsJWT with our newly defined options, as well as setting the <code class=\"language-text\">subject</code> claim to <code class=\"language-text\">id</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> jwtCredentials <span class=\"token operator\">=</span> <span class=\"token builtin\">CredentialsJWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MyClaims</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>verifier<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>jwtVerifier<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">CredentialsJWTOptions</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">:</span> <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">CredentialsJWTOptions</span><span class=\"token punctuation\">.</span>userProfileDelegate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">MyDelegate</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally we create our middleware and register our plugin to it, the same as we have done earlier:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> authenticationMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">Credentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nauthenticationMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">:</span> jwtCredentials<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtprotected\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> authenticationMiddleware<span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtprotected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> userProfile <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>userProfile <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">verbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed raw token authentication\"</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>unauthorized<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>userProfile<span class=\"token punctuation\">.</span>id<span class=\"token delimiter variable\">)</span></span>\\n\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using the same terminal commands as earlier, you can test your JWT generation and authentication:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET \\\nhttp://localhost:8080/jwtprotected \\\n-H &#39;X-Token-Type: JWT&#39; \\\n-H &#39;Authorization: Bearer &lt;Your JWT string here&gt;&#39;</code></pre></div>\n<p>Congratulations! You are now using your own set of custom claims to generate a JWT and authenticate a user!</p>\n<h2 id=\"step-10-jwts-on-codable-routes-optional\"><a href=\"#step-10-jwts-on-codable-routes-optional\" aria-label=\"step 10 jwts on codable routes optional permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 10: JWTs on Codable Routes (Optional)</h2>\n<p>In our example we used raw routing since we chose to pass the user credentials via the request headers. If we want to use JWTs on our codable routes, we need to encapsulate the verification and creation of the users JWT in a <code class=\"language-text\">TypeSafeMiddleware</code>.</p>\n<h3 id=\"step-10a-register-typesafejwt-on-a-route\"><a href=\"#step-10a-register-typesafejwt-on-a-route\" aria-label=\"step 10a register typesafejwt on a route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 10a: Register TypeSafeJWT on a route.</h3>\n<p>In the <code class=\"language-text\">JWTRoutesFile.swift</code> we are going to create a new route for a <code class=\"language-text\">TypeSafeJWT</code>.</p>\n<p>In the function <code class=\"language-text\">initializeJWTRoutes</code>, declare the verifier for the <code class=\"language-text\">TypeSafeJWT</code> (this example is using the <code class=\"language-text\">HS256</code> algorithm):</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">TypeSafeJWT</span><span class=\"token punctuation\">.</span>verifier <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">hs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kitura\"</span><span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We will then add the codable route handler, the handler will only be invoked if the JWT can be successfully verified, and contains the required claims.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/jwtcodable\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">:</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">ClaimsStandardJWT</span><span class=\"token operator\">></span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n     <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h3 id=\"step-10b-test-the-new-codable-route\"><a href=\"#step-10b-test-the-new-codable-route\" aria-label=\"step 10b test the new codable route permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 10b: Test the new Codable route</h3>\n<p>To test this route, restart your server and send the <code class=\"language-text\">POST</code> request from Step 6.</p>\n<p>Copy the returned JWT string and paste it into the following curl request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X GET \\\nhttp://localhost:8080/jwtcodable \\\n-H &#39;X-Token-Type: JWT&#39; \\\n-H &#39;Authorization: Bearer &lt;Your JWT string here&gt;&#39;</code></pre></div>\n<p>You should see your JWT claims returned to you. This should look something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{&quot;claims&quot;:{&quot;iss&quot;:&quot;Kitura&quot;,&quot;sub&quot;:&quot;Joe Bloggs&quot;,&quot;exp&quot;:574703307.61258602},&quot;header&quot;:{&quot;typ&quot;:&quot;JWT&quot;,&quot;alg&quot;:&quot;HS256&quot;}}</code></pre></div>","frontmatter":{"path":"/docs/authentication/jwt","title":"JSON Web Token Authentication"}},"docsList":{"nodes":[{"title":"Getting Started","items":[{"title":"Installation","link":"/docs/getting-started/installation"},{"title":"Hello World","link":"/docs/getting-started/hello-world"},{"title":"Create a Server using Kitura CLI","link":"/docs/getting-started/create-server-cli"},{"title":"Create a Server using SPM","link":"/docs/getting-started/create-server-spm"}]},{"title":"Logging","items":[{"title":"What is Logging?","link":"/docs/logging/what-is-logging"},{"title":"HeliumLogger","link":"/docs/logging/helium-logger"}]},{"title":"Routing","items":[{"title":"What is Routing?","link":"/docs/routing/what-is-routing"},{"title":"Codable Routing","link":"/docs/routing/codable-routing"},{"title":"OpenAPI","link":"/docs/routing/kitura-openapi"},{"title":"Raw Routing","link":"/docs/routing/raw-routing"}]},{"title":"Databases","items":[{"title":"What are Databases?","link":"/docs/databases/what-are-databases"},{"title":"SQL - ORM","link":"/docs/databases/orm"},{"title":"SQL - Kuery","link":"/docs/databases/kuery"},{"title":"NoSQL - CouchDB","link":"/docs/databases/couchdb"}]},{"title":"Sessions","items":[{"title":"What are Sessions?","link":"/docs/sessions/what-are-sessions"},{"title":"Codable Routing Session","link":"/docs/sessions/codable-session"},{"title":"Raw Routing Session","link":"/docs/sessions/raw-session"}]},{"title":"Authentication","items":[{"title":"What is Authentication?","link":"/docs/authentication/what-is-authentication"},{"title":"Basic Authentication","link":"/docs/authentication/basic-authentication"},{"title":"JSON Web Tokens","link":"/docs/authentication/jwt"},{"title":"OAuth 2.0 with Google/Facebook","link":"/docs/authentication/oauth2"}]},{"title":"Web Applications","items":[{"title":"What is Templating?","link":"/docs/web/what-is-templating"},{"title":"Static File Server","link":"/docs/web/static-file-server"},{"title":"Stencil","link":"/docs/web/stencil"},{"title":"Markdown","link":"/docs/web/markdown"}]},{"title":"Client","items":[{"title":"What is a client?","link":"/docs/client/client"},{"title":"iOS Client","link":"/docs/client/iOSClient"}]},{"title":"WebSockets","items":[{"title":"What are WebSockets?","link":"/docs/websockets/websockets"},{"title":"Echo Server","link":"/docs/websockets/echo-server"}]},{"title":"Deploying","items":[{"title":"Monitoring","link":"/docs/deploying/monitoring"},{"title":"Enabling SSL/TLS","link":"/docs/deploying/enabling-ssl"},{"title":"Docker","link":"/docs/deploying/docker"},{"title":"Kubernetes","link":"/docs/deploying/kubernetes"},{"title":"Cloud Foundry","link":"/docs/deploying/cloud-foundry"}]},{"title":"Configuring","items":[{"title":"Enabling SwiftNIO","link":"/docs/configuring/swiftnio"}]},{"title":"API","items":[{"title":"Kitura","link":"/docs/api/kitura"},{"title":"HTTP Client","link":"/docs/api/http-client"},{"title":"Sessions","link":"/docs/api/sessions"},{"title":"Authentication","link":"/docs/api/authentication"},{"title":"Web Templating","link":"/docs/api/web-templating"},{"title":"SQL Databases","link":"/docs/api/sql-databases"},{"title":"Non-SQL Databases","link":"/docs/api/non-sql-databases"},{"title":"Cloud Integration","link":"/docs/api/cloud-integration"},{"title":"Middlewares","link":"/docs/api/middlewares"},{"title":"Cryptography","link":"/docs/api/cryptography"},{"title":"Email","link":"/docs/api/email"}]}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}