{"componentChunkName":"component---src-templates-docs-js","path":"/docs/authentication/oauth2","result":{"data":{"docs":{"html":"<h1 id=\"oauth-20-authentication-with-googlefacebook\"><a href=\"#oauth-20-authentication-with-googlefacebook\" aria-label=\"oauth 20 authentication with googlefacebook permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OAuth 2.0 authentication with Google/Facebook</h1>\n<p><a href=\"https://oauth.net/2/\">OAuth 2.0</a> is an authorization framework that enables you to authenticate a user via a trusted third party. A brief summary of the protocol flow is as follows:</p>\n<ul>\n<li>The user wants to log in to a server (e.g. your Kitura application).</li>\n<li>The user is redirected to the OAuth 2.0 provider (e.g. Facebook/Google).</li>\n<li>The user authenticates with the OAuth 2.0 provider and is given a single use access code.</li>\n<li>The user is sent back to the server and provides them with the access code.</li>\n<li>The server sends the access code to the OAuth 2.0 provider and is given an access token.</li>\n<li>The server uses the access token to request the user's information and authenticate them.</li>\n</ul>\n<p>If you would like a more in-depth explanation of OAuth 2.0, you can read <a href=\"https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2\">this guide</a> by DigitalOcean.</p>\n<p>Kitura supports OAuth 2.0 authentication using plugins for the <a href=\"https://github.com/Kitura-Next/Kitura-Credentials\">Kitura-Credentials</a> authentication framework. In this guide, we show you how to use the <a href=\"https://github.com/Kitura-Next/Kitura-CredentialsGoogle\">Kitura-CredentialsGoogle</a> and the <a href=\"https://github.com/Kitura-Next/Kitura-CredentialsFacebook\">Kitura-CredentialsFacebook</a> plugins. Because we are authenticating using a third party, the user does not need to create a new account for our service and we don't need to handle their username and password.</p>\n<blockquote>\n<p>This guide describes how to implement the OAuth 2.0 flow for a client accessing the server via a web browser.<br>\nFor a mobile application, the user must authenticate themselves on the device, send the access token to the server and have the token authenticated using a Credentials token plugin. We will not cover the mobile application flow in this guide.</p>\n</blockquote>\n<hr>\n<h2 id=\"step-1-create-your-third-party-oauth-20-application\"><a href=\"#step-1-create-your-third-party-oauth-20-application\" aria-label=\"step 1 create your third party oauth 20 application permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Create your third party OAuth 2.0 application</h2>\n<p>For this guide we need a third party OAuth 2.0 provider who will authenticate the user. We will be using Google for this guide, but you can read instructions on how to create the OAuth 2.0 provider for Facebook below. After this initial setup, swapping Google for Facebook in code examples would create valid Facebook OAuth 2.0 authentication.</p>\n<h3 id=\"google-oauth-20\"><a href=\"#google-oauth-20\" aria-label=\"google oauth 20 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Google OAuth 2.0:</h3>\n<ul>\n<li>Follow the Google <a href=\"https://support.google.com/cloud/answer/6158849?hl=en\">Setting up OAuth 2.0</a> guide.</li>\n<li>Once you have created your client ID, add <a href=\"http://localhost:8080/oauth2/google\">http://localhost:8080/oauth2/google</a> to your authorized redirect URIs.</li>\n<li>Note down the client ID and client secret. We will need them later.</li>\n</ul>\n<h3 id=\"facebook-oauth-20\"><a href=\"#facebook-oauth-20\" aria-label=\"facebook oauth 20 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Facebook Oauth 2.0:</h3>\n<ul>\n<li>Log in/sign up to <a href=\"https://developers.facebook.com/apps/\">Facebook developers.</a></li>\n<li>Create a new Facebook App with a name of your choice.</li>\n<li>From the dashboard, add the Facebook login product.</li>\n<li>Inside Facebook login settings, add <a href=\"http://localhost:8080/oauth2/facebook\">http://localhost:8080/oauth2/facebook</a> to the Valid OAuth Redirect URIs.</li>\n<li>Inside the App settings, note down the App ID and App Secret. We will need them later.</li>\n</ul>\n<hr>\n<h2 id=\"step-2-create-the-oauth-20-routes\"><a href=\"#step-2-create-the-oauth-20-routes\" aria-label=\"step 2 create the oauth 20 routes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Create the OAuth 2.0 routes</h2>\n<p>In this guide we are going to create three Kitura routes:</p>\n<ul>\n<li>A log in route, where we authenticate the user</li>\n<li>A protected route, which can only be accessed by a user who is logged in</li>\n<li>A log out route, where we revoke the users credentials</li>\n</ul>\n<p>In this step we will create the framework for our protected and log out routes.</p>\n<blockquote>\n<p>If you don't have a server, follow our <a href=\"../getting-started/create-server-cli\">Create a server</a> guide.</p>\n</blockquote>\n<p>Firstly, open your <code class=\"language-text\">Application.swift</code> file in your default text editor (or Xcode if you prefer):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Application.swift</code></pre></div>\n<p>Inside the <code class=\"language-text\">postInit()</code> function add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">initializeOAuth2Routes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Next, create a new file, called <code class=\"language-text\">OAuth2Routes.swift</code>, to contain the framework for our routes code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Routes/OAuth2Routes.swift</code></pre></div>\n<p>Open your <code class=\"language-text\">OAuth2Routes.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Routes/OAuth2Routes.swift</code></pre></div>\n<p>Inside this file, add the framework for our routes code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">initializeOAuth2Routes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Configure Credentials and session here</span>\n\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth2/protected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n      <span class=\"token comment\">// Check the user is authenticated here</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth2/logout\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n      <span class=\"token comment\">// Log out user here</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-3-import-dependencies\"><a href=\"#step-3-import-dependencies\" aria-label=\"step 3 import dependencies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Import dependencies</h2>\n<p>Add <a href=\"https://github.com/Kitura-Next/Kitura-Credentials\">Kitura-Credentials</a>, <a href=\"https://github.com/Kitura-Next/Kitura-CredentialsGoogle\">Kitura-CredentialsGoogle</a> and <a href=\"https://github.com/Kitura-Next/Kitura-Session\">Kitura-Session</a> to the dependencies in the <code class=\"language-text\">Package.swift</code> file.</p>\n<p>Inside the file which defines the routes, <code class=\"language-text\">OAuth2Routes.swift</code>, import Credentials, CredentialsGoogle and KituraSession:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Credentials</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsGoogle</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraSession</span></code></pre></div>\n<hr>\n<h2 id=\"step-4-set-up-a-session\"><a href=\"#step-4-set-up-a-session\" aria-label=\"step 4 set up a session permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Set up a session</h2>\n<p>Kitura-Credentials requires a session to be set up on the protected routes. This will use cookies to keep the user logged in after the initial authentication.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> <span class=\"token function\">Session</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"AuthSecret\"</span><span class=\"token punctuation\">,</span> cookie<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">CookieParameter</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kitura-Auth-cookie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth2\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> session<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2 id=\"step-5-configure-your-credentials-middleware\"><a href=\"#step-5-configure-your-credentials-middleware\" aria-label=\"step 5 configure your credentials middleware permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5: Configure your Credentials middleware</h2>\n<p>We need to initialize an instance of our Credentials plugin using the id and secret from the OAuth 2.0 application we created in step 1.</p>\n<p>We add the following code to our <code class=\"language-text\">initializeOAuth2Routes</code> function, substituting in our own id and secret:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> googleClientId <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;Your Google Client Id>\"</span>\n<span class=\"token keyword\">let</span> googleClientSecret <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;Your Google Client Secret>\"</span>\n<span class=\"token keyword\">let</span> googleCallbackUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8080/oauth2/google\"</span>\n<span class=\"token keyword\">let</span> googleCredentials <span class=\"token operator\">=</span> <span class=\"token function\">CredentialsGoogle</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">:</span> googleClientId<span class=\"token punctuation\">,</span> clientSecret<span class=\"token punctuation\">:</span> googleClientSecret<span class=\"token punctuation\">,</span> callbackUrl<span class=\"token punctuation\">:</span> googleCallbackUrl<span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2 id=\"step-6-register-your-credentials-plugin\"><a href=\"#step-6-register-your-credentials-plugin\" aria-label=\"step 6 register your credentials plugin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 6: Register your Credentials plugin</h2>\n<p>We need to register our plugin credentials to a <code class=\"language-text\">Credentials</code> middleware.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> googleCredMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">Credentials</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"successRedirect\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/oauth2/protected\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ngoogleCredMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">:</span> googleCredentials<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Next, we need to register our <code class=\"language-text\">Credentials</code> middleware on our login route.</p>\n<p>When a user hits this route, they will be redirected to the OAuth 2.0 provider.</p>\n<p>When the user is sent back to this route, their access code with be authenticated.</p>\n<p>If they successfully authenticate, they will be redirected to the \"successRedirect\" we set on our middleware.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth2/google\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> googleCredMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>credentialsType<span class=\"token punctuation\">:</span> googleCredentials<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2 id=\"step-7-check-if-a-user-is-logged-in\"><a href=\"#step-7-check-if-a-user-is-logged-in\" aria-label=\"step 7 check if a user is logged in permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 7: Check if a user is logged in</h2>\n<p>Once a user successfully authenticates, they will have a <code class=\"language-text\">userProfile</code> attached to all their requests via the session we set up in step 4.</p>\n<p>Inside our <code class=\"language-text\">oauth2/protected</code> route, we want to check if they have logged in using the <code class=\"language-text\">userProfile</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>userProfile <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not authorized to view this route\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nresponse<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>displayName<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>The user profile contains information about the user such as how they authenticated, their unique id and their displayName.</p>\n</blockquote>\n<hr>\n<h2 id=\"step-8-logging-out-a-user\"><a href=\"#step-8-logging-out-a-user\" aria-label=\"step 8 logging out a user permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 8: Logging out a user</h2>\n<p>The user will remain logged in as long as their cookie provides a valid <code class=\"language-text\">userProfile</code>. We can log out a user by invalidating the cookie with the session store or by setting the <code class=\"language-text\">userProfile</code> to <code class=\"language-text\">nil</code>.</p>\n<p>Inside our logout route handler, call the <code class=\"language-text\">Credentials.logOut</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">googleCredMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">logOut</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Our completed OAuth 2.0 routes should now look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Credentials</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsGoogle</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraSession</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeOAuth2Routes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> <span class=\"token function\">Session</span><span class=\"token punctuation\">(</span>secret<span class=\"token punctuation\">:</span> <span class=\"token string\">\"AuthSecret\"</span><span class=\"token punctuation\">,</span> cookie<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">CookieParameter</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kitura-Auth-cookie\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth2\"</span><span class=\"token punctuation\">,</span> middleware<span class=\"token punctuation\">:</span> session<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> googleClientId <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;Your Google Client Id>\"</span>\n    <span class=\"token keyword\">let</span> googleClientSecret <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;Your Google Client Secret>\"</span>\n    <span class=\"token keyword\">let</span> googleCallbackUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8080/oauth2/google\"</span>\n    <span class=\"token keyword\">let</span> googleCredentials <span class=\"token operator\">=</span> <span class=\"token function\">CredentialsGoogle</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">:</span> googleClientId<span class=\"token punctuation\">,</span> clientSecret<span class=\"token punctuation\">:</span> googleClientSecret<span class=\"token punctuation\">,</span> callbackUrl<span class=\"token punctuation\">:</span> googleCallbackUrl<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">let</span> googleCredMiddleware <span class=\"token operator\">=</span> <span class=\"token function\">Credentials</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"successRedirect\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/oauth2/protected\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    googleCredMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">:</span> googleCredentials<span class=\"token punctuation\">)</span>\n\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth2/google\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> googleCredMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span>credentialsType<span class=\"token punctuation\">:</span> googleCredentials<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth2/protected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n      <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>userProfile <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not authorized to view this route\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token punctuation\">.</span>displayName<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oauth2/logout\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n      googleCredMiddleware<span class=\"token punctuation\">.</span><span class=\"token function\">logOut</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"step-9-testing-our-oauth-20-authentication-system\"><a href=\"#step-9-testing-our-oauth-20-authentication-system\" aria-label=\"step 9 testing our oauth 20 authentication system permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 9: Testing our OAuth 2.0 authentication system</h2>\n<p>Now that everything is set up we can test logging in using OAuth 2.0.</p>\n<p>Start your server and open your browser at:</p>\n<p><a href=\"http://localhost:8080/oauth2/protected\" target=\"blank\">localhost:8080/oauth2/protected</a></p>\n<p>We will be sent our unauthorized message since we haven't logged in yet.</p>\n<p>We authenticate by going to the login route for our plugin:</p>\n<p><a href=\"http://localhost:8080/oauth2/google\">http://localhost:8080/oauth2/google</a></p>\n<p><a href=\"http://localhost:8080/oauth2/google\" target=\"blank\">localhost:8080/oauth2/google</a></p>\n<p>This will send you to the OAuth 2.0 provider who will request that you log in and provide access to our server.</p>\n<p>Once you complete this you will be sent back to our server which will redirect you to our \"/oauth2/protected\" route.</p>\n<p>This time you will be authenticated and will see a welcome message.</p>\n<p>As long as your session persists, you can return to <a href=\"http://localhost:8080/oauth2/protected\" target=\"blank\">localhost:8080/oauth2/protected</a> and will be allowed access.</p>\n<p>Congratulations! You have just set up OAuth 2.0 authentication on your Kitura server.</p>","frontmatter":{"path":"/docs/authentication/oauth2","title":"Add Oauth2 to your app"}},"docsList":{"nodes":[{"title":"Getting Started","items":[{"title":"Installation","link":"/docs/getting-started/installation"},{"title":"Hello World","link":"/docs/getting-started/hello-world"},{"title":"Create a Server using Kitura CLI","link":"/docs/getting-started/create-server-cli"},{"title":"Create a Server using SPM","link":"/docs/getting-started/create-server-spm"}]},{"title":"Logging","items":[{"title":"What is Logging?","link":"/docs/logging/what-is-logging"},{"title":"HeliumLogger","link":"/docs/logging/helium-logger"}]},{"title":"Routing","items":[{"title":"What is Routing?","link":"/docs/routing/what-is-routing"},{"title":"Codable Routing","link":"/docs/routing/codable-routing"},{"title":"OpenAPI","link":"/docs/routing/kitura-openapi"},{"title":"Raw Routing","link":"/docs/routing/raw-routing"}]},{"title":"Databases","items":[{"title":"What are Databases?","link":"/docs/databases/what-are-databases"},{"title":"SQL - ORM","link":"/docs/databases/orm"},{"title":"SQL - Kuery","link":"/docs/databases/kuery"},{"title":"NoSQL - CouchDB","link":"/docs/databases/couchdb"}]},{"title":"Sessions","items":[{"title":"What are Sessions?","link":"/docs/sessions/what-are-sessions"},{"title":"Codable Routing Session","link":"/docs/sessions/codable-session"},{"title":"Raw Routing Session","link":"/docs/sessions/raw-session"}]},{"title":"Authentication","items":[{"title":"What is Authentication?","link":"/docs/authentication/what-is-authentication"},{"title":"Basic Authentication","link":"/docs/authentication/basic-authentication"},{"title":"JSON Web Tokens","link":"/docs/authentication/jwt"},{"title":"OAuth 2.0 with Google/Facebook","link":"/docs/authentication/oauth2"}]},{"title":"Web Applications","items":[{"title":"What is Templating?","link":"/docs/web/what-is-templating"},{"title":"Static File Server","link":"/docs/web/static-file-server"},{"title":"Stencil","link":"/docs/web/stencil"},{"title":"Markdown","link":"/docs/web/markdown"}]},{"title":"Client","items":[{"title":"What is a client?","link":"/docs/client/client"},{"title":"iOS Client","link":"/docs/client/iOSClient"}]},{"title":"WebSockets","items":[{"title":"What are WebSockets?","link":"/docs/websockets/websockets"},{"title":"Echo Server","link":"/docs/websockets/echo-server"}]},{"title":"Deploying","items":[{"title":"Monitoring","link":"/docs/deploying/monitoring"},{"title":"Enabling SSL/TLS","link":"/docs/deploying/enabling-ssl"},{"title":"Docker","link":"/docs/deploying/docker"},{"title":"Kubernetes","link":"/docs/deploying/kubernetes"},{"title":"Cloud Foundry","link":"/docs/deploying/cloud-foundry"}]},{"title":"Configuring","items":[{"title":"Enabling SwiftNIO","link":"/docs/configuring/swiftnio"}]},{"title":"API","items":[{"title":"Kitura","link":"/docs/api/kitura"},{"title":"HTTP Client","link":"/docs/api/http-client"},{"title":"Sessions","link":"/docs/api/sessions"},{"title":"Authentication","link":"/docs/api/authentication"},{"title":"Web Templating","link":"/docs/api/web-templating"},{"title":"SQL Databases","link":"/docs/api/sql-databases"},{"title":"Non-SQL Databases","link":"/docs/api/non-sql-databases"},{"title":"Cloud Integration","link":"/docs/api/cloud-integration"},{"title":"Middlewares","link":"/docs/api/middlewares"},{"title":"Cryptography","link":"/docs/api/cryptography"},{"title":"Email","link":"/docs/api/email"}]}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}