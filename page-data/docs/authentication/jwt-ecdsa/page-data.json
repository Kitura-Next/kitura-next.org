{"componentChunkName":"component---src-templates-docs-js","path":"/docs/authentication/jwt-ecdsa","result":{"data":{"docs":{"html":"<h1 id=\"signing-and-verifying-jwts-with-ecdsa\"><a href=\"#signing-and-verifying-jwts-with-ecdsa\" aria-label=\"signing and verifying jwts with ecdsa permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Signing and verifying JWTs with ECDSA</h1>\n<p>You can process JWTs using Elliptic Curve Digital Signature Algorithm (ECDSA). This uses asymmetric keys with a private key for signing and a public key for verifying. The public key allows anyone to verify a JWT but only the provider can create them. ECDSA is recommended over RSA since it uses smaller keys, requires less processing power and produces smaller signatures.</p>\n<hr>\n<h2 id=\"step-1-create-your-elliptic-curve-keys\"><a href=\"#step-1-create-your-elliptic-curve-keys\" aria-label=\"step 1 create your elliptic curve keys permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Create your elliptic curve keys</h2>\n<p>Elliptic curve keys can be generated through <a href=\"https://developer.apple.com/account/ios/authkey\">Apple</a>, <a href=\"https://wiki.openssl.org/index.php/Command_Line_Elliptic_Curve_Operations#Generating_EC_Keys_and_Parameters\">OpenSSL</a> or using <a href=\"https://github.com/Kitura-Next/BlueECC#elliptic-curve-private-key\">BlueECC</a>.</p>\n<p>For simplicity you can use the following pre-generated keys.</p>\n<p>Add the following EC PEM strings (Or strings you have generated) to your <code class=\"language-text\">App</code> extension:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> privateKey <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\"\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">BEGIN</span> <span class=\"token constant\">EC</span> <span class=\"token constant\">PRIVATE</span> <span class=\"token constant\">KEY</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token builtin\">MHcCAQEEIJX</span><span class=\"token operator\">+</span>87WJ7Gh19sohyZnhxZeXYNOcuGv4Q<span class=\"token operator\">+</span>8MLge4UkaZoAoGCCqGSM49\n<span class=\"token builtin\">AwEHoUQDQgAEikc5m6C2xtDWeeAeT18WElO37zvFOz8p4kAlhvgIHN23XIClNESg</span>\n<span class=\"token builtin\">KVmLgSSq2asqiwdrU5YHbcHFkgdABM1SPA</span><span class=\"token operator\">==</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">END</span> <span class=\"token constant\">EC</span> <span class=\"token constant\">PRIVATE</span> <span class=\"token constant\">KEY</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token string\">\"\"</span>\"\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> publicKey <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\"\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">BEGIN</span> <span class=\"token constant\">PUBLIC</span> <span class=\"token constant\">KEY</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token builtin\">MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEikc5m6C2xtDWeeAeT18WElO37zvF</span>\n<span class=\"token builtin\">Oz8p4kAlhvgIHN23XIClNESgKVmLgSSq2asqiwdrU5YHbcHFkgdABM1SPA</span><span class=\"token operator\">==</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token constant\">END</span> <span class=\"token constant\">PUBLIC</span> <span class=\"token constant\">KEY</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>\n<span class=\"token string\">\"\"</span>\"</code></pre></div>\n<hr>\n<h2 id=\"step-2-create-your-jwtsigner\"><a href=\"#step-2-create-your-jwtsigner\" aria-label=\"step 2 create your jwtsigner permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Create your JWTSigner</h2>\n<p>The <code class=\"language-text\">JWTSigner</code> is used to sign a <code class=\"language-text\">JWT</code> instance and produce a signed JWT string.</p>\n<p>Inside the <code class=\"language-text\">App</code> extension, create an ECDSA <code class=\"language-text\">JWTSigner</code> by providing the private key:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@<span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token constant\">OSX</span> <span class=\"token number\">10.13</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> jwtSigner <span class=\"token operator\">=</span> <span class=\"token builtin\">JWTSigner</span><span class=\"token punctuation\">.</span><span class=\"token function\">es256</span><span class=\"token punctuation\">(</span>privateKey<span class=\"token punctuation\">:</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span>privateKey<span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>ECDSA algorithms such as <code class=\"language-text\">es256</code> use <a href=\"https://github.com/Kitura-Next/BlueECC\">BlueECC</a>, which is only available on macOS 10.13 or newer. When using them you will need to us <code class=\"language-text\">@available</code> to handle cases where the operating system version is not high enough.</p>\n</blockquote>\n<hr>\n<h2 id=\"step-3-create-your-jwtverifier\"><a href=\"#step-3-create-your-jwtverifier\" aria-label=\"step 3 create your jwtverifier permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Create your JWTVerifier</h2>\n<p>The <code class=\"language-text\">JWTVerifier</code> is used to verify a signed JWT string. This ensures the signature was generated using the corresponding private key and the JWT has not been changed.</p>\n<p>Inside the <code class=\"language-text\">App</code> extension, we create an ECDSA <code class=\"language-text\">JWTVerifier</code> by providing the public key:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">@<span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token constant\">OSX</span> <span class=\"token number\">10.13</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> jwtVerifier <span class=\"token operator\">=</span> <span class=\"token builtin\">JWTVerifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">es256</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">:</span> <span class=\"token function\">Data</span><span class=\"token punctuation\">(</span>publicKey<span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p>Now you can return to the <a href=\"./jwt#step-2-set-up-your-signing-and-verifying-algorithm\">JSON Web Token Authentication</a> guide.</p>","frontmatter":{"path":"/docs/authentication/jwt-ecdsa","title":"Signing and verifying JWTs with ECDSA"}},"docsList":{"nodes":[{"title":"Getting Started","items":[{"title":"Installation","link":"/docs/getting-started/installation"},{"title":"Hello World","link":"/docs/getting-started/hello-world"},{"title":"Create a Server using Kitura CLI","link":"/docs/getting-started/create-server-cli"},{"title":"Create a Server using SPM","link":"/docs/getting-started/create-server-spm"}]},{"title":"Logging","items":[{"title":"What is Logging?","link":"/docs/logging/what-is-logging"},{"title":"HeliumLogger","link":"/docs/logging/helium-logger"}]},{"title":"Routing","items":[{"title":"What is Routing?","link":"/docs/routing/what-is-routing"},{"title":"Codable Routing","link":"/docs/routing/codable-routing"},{"title":"OpenAPI","link":"/docs/routing/kitura-openapi"},{"title":"Raw Routing","link":"/docs/routing/raw-routing"}]},{"title":"Databases","items":[{"title":"What are Databases?","link":"/docs/databases/what-are-databases"},{"title":"SQL - ORM","link":"/docs/databases/orm"},{"title":"SQL - Kuery","link":"/docs/databases/kuery"},{"title":"NoSQL - CouchDB","link":"/docs/databases/couchdb"}]},{"title":"Sessions","items":[{"title":"What are Sessions?","link":"/docs/sessions/what-are-sessions"},{"title":"Codable Routing Session","link":"/docs/sessions/codable-session"},{"title":"Raw Routing Session","link":"/docs/sessions/raw-session"}]},{"title":"Authentication","items":[{"title":"What is Authentication?","link":"/docs/authentication/what-is-authentication"},{"title":"Basic Authentication","link":"/docs/authentication/basic-authentication"},{"title":"JSON Web Tokens","link":"/docs/authentication/jwt"},{"title":"OAuth 2.0 with Google/Facebook","link":"/docs/authentication/oauth2"}]},{"title":"Web Applications","items":[{"title":"What is Templating?","link":"/docs/web/what-is-templating"},{"title":"Static File Server","link":"/docs/web/static-file-server"},{"title":"Stencil","link":"/docs/web/stencil"},{"title":"Markdown","link":"/docs/web/markdown"}]},{"title":"Client","items":[{"title":"What is a client?","link":"/docs/client/client"},{"title":"iOS Client","link":"/docs/client/iOSClient"}]},{"title":"WebSockets","items":[{"title":"What are WebSockets?","link":"/docs/websockets/websockets"},{"title":"Echo Server","link":"/docs/websockets/echo-server"}]},{"title":"Deploying","items":[{"title":"Monitoring","link":"/docs/deploying/monitoring"},{"title":"Enabling SSL/TLS","link":"/docs/deploying/enabling-ssl"},{"title":"Docker","link":"/docs/deploying/docker"},{"title":"Kubernetes","link":"/docs/deploying/kubernetes"},{"title":"Cloud Foundry","link":"/docs/deploying/cloud-foundry"}]},{"title":"Configuring","items":[{"title":"Enabling SwiftNIO","link":"/docs/configuring/swiftnio"}]},{"title":"API","items":[{"title":"Kitura","link":"/docs/api/kitura"},{"title":"HTTP Client","link":"/docs/api/http-client"},{"title":"Sessions","link":"/docs/api/sessions"},{"title":"Authentication","link":"/docs/api/authentication"},{"title":"Web Templating","link":"/docs/api/web-templating"},{"title":"SQL Databases","link":"/docs/api/sql-databases"},{"title":"Non-SQL Databases","link":"/docs/api/non-sql-databases"},{"title":"Cloud Integration","link":"/docs/api/cloud-integration"},{"title":"Middlewares","link":"/docs/api/middlewares"},{"title":"Cryptography","link":"/docs/api/cryptography"},{"title":"Email","link":"/docs/api/email"}]}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}