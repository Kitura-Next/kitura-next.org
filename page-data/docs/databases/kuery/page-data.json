{"componentChunkName":"component---src-templates-docs-js","path":"/docs/databases/kuery","result":{"data":{"docs":{"html":"<h1 id=\"swift-kuery\"><a href=\"#swift-kuery\" aria-label=\"swift kuery permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift Kuery</h1>\n<p><a href=\"https://github.com/Kitura-Next/Swift-Kuery\">Swift-Kuery</a> is a pluggable SQL database driver/SDK abstraction layer. Its main idea is to unify the APIs to the various relational databases, providing a Swifty yet SQL-like API. This guide will demonstrate how to connect to a SQL database using one of the Swift-Kuery plugins and how to use this connection to send SQL queries to your database.</p>\n<hr>\n<h2 id=\"step-1-create-the-kuery-routes\"><a href=\"#step-1-create-the-kuery-routes\" aria-label=\"step 1 create the kuery routes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 1: Create the Kuery routes</h2>\n<p>We are going to create a new file in our project for the Kuery routes.  The routes defined in this guide are examples of Codable routes. The equivalent definitions for raw routes can be found using the links below each code segment.</p>\n<blockquote>\n<p>If you don't have a server, follow our <a href=\"https://www.kituranext.org/docs/getting-started/create-server-cli\">Create a server</a> guide.</p>\n</blockquote>\n<p>Open your <code class=\"language-text\">Application.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Application.swift</code></pre></div>\n<p>Inside the <code class=\"language-text\">postInit()</code> function add:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token function\">initializeKueryRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Create a new file called <code class=\"language-text\">KueryRoutes.swift</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Routes/KueryRoutes.swift</code></pre></div>\n<p>Open the <code class=\"language-text\">KueryRoutes.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">touch <span class=\"token builtin\">Sources</span><span class=\"token operator\">/</span><span class=\"token builtin\">Application</span><span class=\"token operator\">/</span><span class=\"token builtin\">Routes</span><span class=\"token operator\">/</span><span class=\"token builtin\">KueryRoutes</span><span class=\"token punctuation\">.</span>swift</code></pre></div>\n<p>Inside this file we are going to create two routes. The first will use Swift-Kuery to save a <code class=\"language-text\">Book</code> into a database and the second will retrieve all of the saved books.</p>\n<p>Add the following code to your <code class=\"language-text\">KueryRoutes.swift</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraContracts</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">LoggerAPI</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Foundation</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeKueryRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kuery\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>insertHandler<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kuery\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>selectHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Create connection pool and initialize BookTable here</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">insertHandler</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Book</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Handle POST here</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">selectHandler</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Handle GET here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/docs/databases/kuery1\" target=\"blank\"> See the above code as a raw route.</a></p>\n<blockquote>\n<p>The routes in this guide are using the <a href=\"/docs/routing/what-is-routing#codable-model\">Book model from the routing guide</a>, however you could use any Codable type.</p>\n</blockquote>\n<hr>\n<h2 id=\"step-2-install-a-database-plugin\"><a href=\"#step-2-install-a-database-plugin\" aria-label=\"step 2 install a database plugin permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 2: Install a database plugin</h2>\n<p>Kitura has built in support for PostgreSQL, MySQL and SQLite.</p>\n<p>The API to use each plugin is the same but the installation steps differ slightly.</p>\n<p>The algorithms are as follows:</p>\n<ul>\n<li><a href=\"/docs/databases/kuery-postgresql\">PostgreSQL</a></li>\n<li><a href=\"/docs/databases/kuery-mysql\">MySQL</a></li>\n<li><a href=\"/docs/databases/kuery-sqlite\">SQLite</a></li>\n</ul>\n<hr>\n<h2 id=\"step-3-create-a-class-to-represent-the-database-table\"><a href=\"#step-3-create-a-class-to-represent-the-database-table\" aria-label=\"step 3 create a class to represent the database table permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 3: Create a class to represent the database table</h2>\n<p>To use SwiftKuery we need to create a class in Swift that matches our database table.</p>\n<p>Create a new file called <code class=\"language-text\">BookTable.swift</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">touch Sources/Application/Models/BookTable.swift</code></pre></div>\n<p>Open the <code class=\"language-text\">BookTable.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/Application/Models/BookTable.swift</code></pre></div>\n<p>Inside <code class=\"language-text\">BookTable.swift</code>, define your <code class=\"language-text\">BookTable</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftKuery</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BookTable</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Table</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tableName <span class=\"token operator\">=</span> <span class=\"token string\">\"BookTable\"</span>\n    <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int32</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> primaryKey<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> title <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> price <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"price\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Float</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> genre <span class=\"token operator\">=</span> <span class=\"token function\">Column</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"genre\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">BookTable</code> class represents our <code class=\"language-text\">Book</code> model as an SQL table. It needs to inherit from <code class=\"language-text\">Table</code> and match the column names of the table we created in the database. We must also provide the table name as a property.</p>\n<p>Return to the <code class=\"language-text\">KueryRoutes.swift</code> file. In the <code class=\"language-text\">App</code> extension, create an instance of this table:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> bookTable <span class=\"token operator\">=</span> <span class=\"token function\">BookTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we're ready to start saving data to our database.</p>\n<hr>\n<h2 id=\"step-4-save-data-to-the-database\"><a href=\"#step-4-save-data-to-the-database\" aria-label=\"step 4 save data to the database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 4: Save data to the database</h2>\n<p>Now we're going to save a book that is posted to the '/kuery' route into our database.</p>\n<p>Inside the handler for our POST route, we need to convert our book to an Array of Arrays of type <code class=\"language-text\">Any</code>. This converts the book that was sent to the route into the format required by Swift-Kuery. We need to use the <code class=\"language-text\">Any</code> type here as the database fields could be of any type.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> rows <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>book<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>genre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// Get connection from pool here</span></code></pre></div>\n<p>To talk to the database, the first thing we need to do is get a connection from the connection pool.</p>\n<p>To do this we can use the <code class=\"language-text\">getConnection</code> method. We can add this into the handler for our POST route:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> connection<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> connection <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Write query and execute it here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/docs/databases/kuery2\" target=\"blank\"> See the above code as a raw route.</a></p>\n<p>When we get a connection from the connection pool we need to confirm it's a valid connection.</p>\n<p>If we don't get a valid connection, we will stop the execution and log an error to the console.</p>\n<p>Now we can build the query for inserting data into a database.</p>\n<p>Beneath our connection guard closure, add the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> insertQuery <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>into<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>bookTable<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">:</span> rows<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Once we have defined our insert query, we need to execute the query using the connection we took from the pool:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">    connection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> insertQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> insertResult <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">guard</span> insertResult<span class=\"token punctuation\">.</span>success <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error executing query: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>insertResult<span class=\"token punctuation\">.</span>asError<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/docs/databases/kuery3\" target=\"blank\"> See the above code as a raw route.</a></p>\n<p>That's it! We've setup our POST route to save data to a database. the completed handler for your POST route should now look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">insertHandler</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Book</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> rows <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>book<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>genre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> connection<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n        <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> connection <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">let</span> insertQuery <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>into<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>bookTable<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">:</span> rows<span class=\"token punctuation\">)</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> insertQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> insertResult <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> insertResult<span class=\"token punctuation\">.</span>success <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error executing query: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>insertResult<span class=\"token punctuation\">.</span>asError<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/docs/databases/kuery4\" target=\"blank\"> See the above code as a raw route.</a></p>\n<p>Next we can test our implementation.</p>\n<hr>\n<h2 id=\"step-5-optional-test-saving-a-book-to-database\"><a href=\"#step-5-optional-test-saving-a-book-to-database\" aria-label=\"step 5 optional test saving a book to database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 5 (Optional): Test saving a book to database</h2>\n<p>First we need to start our Kitura server.</p>\n<p>Once the server is running run the following in a terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl -X POST \\\n      http://localhost:8080/kuery \\\n      -H &#39;content-type: application/json&#39; \\\n      -d &#39;{\n      &quot;id&quot;: 0,\n      &quot;title&quot;: &quot;A Game of Thrones&quot;,\n      &quot;price&quot;: 14.99,\n      &quot;genre&quot;: &quot;Fantasy&quot;\n  }&#39;</code></pre></div>\n<p>This will make a POST request to the server and we should be returned our book in JSON format:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{&quot;id&quot;:0,&quot;title&quot;:&quot;A Game of Thrones&quot;,&quot;price&quot;:14.99,&quot;genre&quot;:&quot;Fantasy&quot;}</code></pre></div>\n<blockquote>\n<p>The following steps are for PostgreSQL. The commands will be different if you used a different database.</p>\n</blockquote>\n<p>Then using the PostgreSQL CLI we can query the database to see if our data was saved.</p>\n<p>Start the PostgreSQL CLI for our database by running the following in a terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">psql bookstoredb</code></pre></div>\n<p>In a terminal which is running the <code class=\"language-text\">psql</code> command, run the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    SELECT * FROM &quot;BookTable&quot;;</code></pre></div>\n<p>You should see the following printed in the terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> id |       title       | price |  genre\n----+-------------------+-------+---------\n 0  | A Game of Thrones | 14.99 | Fantasy\n(1 row)</code></pre></div>\n<p>This shows our POST route is working as we'd expect.</p>\n<p>A better way to test this, as we're writing Swift code, would be to query the database directly from our server instead of using Terminal.</p>\n<hr>\n<h2 id=\"step-6-retrieve-data-from-the-database\"><a href=\"#step-6-retrieve-data-from-the-database\" aria-label=\"step 6 retrieve data from the database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 6: Retrieve data from the database</h2>\n<p>Now we're going to build a SELECT query that will query the database and return all the entries in our <code class=\"language-text\">BookTable</code>.</p>\n<p>Inside the handler for our GET route, we need to get a connection from the connection pool:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> connection<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> connection <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Write query and execute it here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/docs/databases/kuery5\" target=\"blank\"> See the above code as a raw route.</a></p>\n<p>Now we can build our SELECT query that will query the database for every entry in the \"BookTable\":</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">let selectQuery = Select(from: App.bookTable)</code></pre></div>\n<p>Like before we can now execute our query using <code class=\"language-text\">connection.execute</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">connection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> selectQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> selectResult <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> resultSet <span class=\"token operator\">=</span> selectResult<span class=\"token punctuation\">.</span>asResultSet <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>selectResult<span class=\"token punctuation\">.</span>asError<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Iterate through result set here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/docs/databases/kuery6\" target=\"blank\"> See the above code as a raw route.</a></p>\n<p>The query should return a set of results, in the code we use <code class=\"language-text\">.asResultSet</code> to check that the returned value is a valid result set, otherwise we log an error and return.</p>\n<p>Next we need to iterate through our result set, converting each of the returned database table rows into a book:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> books <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nresultSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> row<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// Handle callback here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">forEach</code> function will return either a <code class=\"language-text\">row</code>, an <code class=\"language-text\">error</code> or <code class=\"language-text\">nil</code> (in this case <code class=\"language-text\">nil</code> means that there are no more rows).</p>\n<p>Inside the <code class=\"language-text\">forEach</code> callback, we need to handle these three cases:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> row <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error getting row: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// All rows have been processed</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Convert row to book here</span></code></pre></div>\n<p><a href=\"/docs/databases/kuery7\" target=\"blank\"> See the above code as a raw route.</a></p>\n<p>When we get a row back from the database we need to convert it back into a <code class=\"language-text\">Book</code> model type.</p>\n<p>After the <code class=\"language-text\">guard</code> closure, add the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> idString <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>idString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">let</span> title <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">let</span> price <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">let</span> genre <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">String</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to decode book\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> <span class=\"token number\">_</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nbooks<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> title<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">:</span> price<span class=\"token punctuation\">,</span> genre<span class=\"token punctuation\">:</span> genre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>That's it! We've enabled our GET route to retrieve data from a database.</p>\n<p>Our completed <code class=\"language-text\">KueryRoutes.swift</code> file should now look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">KituraContracts</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">LoggerAPI</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">Foundation</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftKuery</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftKueryPostgreSQL</span> <span class=\"token comment\">// This will be different if you did not use PostgreSQL</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">initializeKueryRoutes</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kuery\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>insertHandler<span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/kuery\"</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">:</span> app<span class=\"token punctuation\">.</span>selectHandler<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token builtin\">App</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> poolOptions <span class=\"token operator\">=</span> <span class=\"token function\">ConnectionPoolOptions</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> maxCapacity<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// The createPool() will be different if you used a plugin other than PostgreSQL</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> pool <span class=\"token operator\">=</span> <span class=\"token builtin\">PostgreSQLConnection</span><span class=\"token punctuation\">.</span><span class=\"token function\">createPool</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">:</span> <span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">:</span> <span class=\"token number\">5432</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token function\">databaseName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bookstoredb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> poolOptions<span class=\"token punctuation\">:</span> poolOptions<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> bookTable <span class=\"token operator\">=</span> <span class=\"token function\">BookTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">insertHandler</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Book</span><span class=\"token punctuation\">,</span> completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token builtin\">Book</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> rows <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>book<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">.</span>genre<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> connection<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> connection <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">let</span> insertQuery <span class=\"token operator\">=</span> <span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>into<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>bookTable<span class=\"token punctuation\">,</span> rows<span class=\"token punctuation\">:</span> rows<span class=\"token punctuation\">)</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> insertQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> insertResult <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">guard</span> insertResult<span class=\"token punctuation\">.</span>success <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error executing query: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>insertResult<span class=\"token punctuation\">.</span>asError<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">func</span> <span class=\"token function\">selectHandler</span><span class=\"token punctuation\">(</span>completion<span class=\"token punctuation\">:</span> @escaping <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> connection<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> connection <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">let</span> selectQuery <span class=\"token operator\">=</span> <span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> <span class=\"token builtin\">App</span><span class=\"token punctuation\">.</span>bookTable<span class=\"token punctuation\">)</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">:</span> selectQuery<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> selectResult <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> resultSet <span class=\"token operator\">=</span> selectResult<span class=\"token punctuation\">.</span>asResultSet <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error connecting: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>selectResult<span class=\"token punctuation\">.</span>asError<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>localizedDescription <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string\">\"Unknown Error\"</span><span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">var</span> books <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Book</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                resultSet<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> row<span class=\"token punctuation\">,</span> error <span class=\"token keyword\">in</span>\n                    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> row <span class=\"token operator\">=</span> row <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> error <span class=\"token operator\">=</span> error <span class=\"token punctuation\">{</span>\n                            <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error getting row: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\">// All rows have been processed</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> idString <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>idString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">let</span> title <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">let</span> price <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token keyword\">let</span> genre <span class=\"token operator\">=</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token builtin\">String</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token builtin\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to decode book\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">return</span> <span class=\"token function\">completion</span><span class=\"token punctuation\">(</span><span class=\"token constant\">nil</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span>internalServerError<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                    books<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">Book</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> id<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> title<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">:</span> price<span class=\"token punctuation\">,</span> genre<span class=\"token punctuation\">:</span> genre<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/docs/databases/kuery8\" target=\"blank\"> See the above code as a raw route.</a></p>\n<hr>\n<h2 id=\"step-7-optional-test-retrieving-the-books-from-a-database\"><a href=\"#step-7-optional-test-retrieving-the-books-from-a-database\" aria-label=\"step 7 optional test retrieving the books from a database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step 7 (Optional): Test retrieving the books from a database</h2>\n<p>If you followed \"Step 5: Testing saving to database\", then you will have a book in your database, which we can retrieve using the code we wrote in \"Step 6: Retrieve data from the database\".</p>\n<p>To do this, start the server and navigate to: <a href=\"http://localhost:8080/kuery\" target=\"blank\">localhost:8080/kuery</a></p>\n<p>This will call GET on the <code class=\"language-text\">/kuery</code> route and we will see the book we posted in Step 5 returned in JSON format. The book data persists even if we restart the Kitura server as it is now stored in a database.</p>","frontmatter":{"path":"/docs/databases/kuery","title":"Add Swift Kuery to your app"}},"docsList":{"nodes":[{"title":"Getting Started","items":[{"title":"Installation","link":"/docs/getting-started/installation"},{"title":"Hello World","link":"/docs/getting-started/hello-world"},{"title":"Create a Server using Kitura CLI","link":"/docs/getting-started/create-server-cli"},{"title":"Create a Server using SPM","link":"/docs/getting-started/create-server-spm"}]},{"title":"Logging","items":[{"title":"What is Logging?","link":"/docs/logging/what-is-logging"},{"title":"HeliumLogger","link":"/docs/logging/helium-logger"}]},{"title":"Routing","items":[{"title":"What is Routing?","link":"/docs/routing/what-is-routing"},{"title":"Codable Routing","link":"/docs/routing/codable-routing"},{"title":"OpenAPI","link":"/docs/routing/kitura-openapi"},{"title":"Raw Routing","link":"/docs/routing/raw-routing"}]},{"title":"Databases","items":[{"title":"What are Databases?","link":"/docs/databases/what-are-databases"},{"title":"SQL - ORM","link":"/docs/databases/orm"},{"title":"SQL - Kuery","link":"/docs/databases/kuery"},{"title":"NoSQL - CouchDB","link":"/docs/databases/couchdb"}]},{"title":"Sessions","items":[{"title":"What are Sessions?","link":"/docs/sessions/what-are-sessions"},{"title":"Codable Routing Session","link":"/docs/sessions/codable-session"},{"title":"Raw Routing Session","link":"/docs/sessions/raw-session"}]},{"title":"Authentication","items":[{"title":"What is Authentication?","link":"/docs/authentication/what-is-authentication"},{"title":"Basic Authentication","link":"/docs/authentication/basic-authentication"},{"title":"JSON Web Tokens","link":"/docs/authentication/jwt"},{"title":"OAuth 2.0 with Google/Facebook","link":"/docs/authentication/oauth2"}]},{"title":"Web Applications","items":[{"title":"What is Templating?","link":"/docs/web/what-is-templating"},{"title":"Static File Server","link":"/docs/web/static-file-server"},{"title":"Stencil","link":"/docs/web/stencil"},{"title":"Markdown","link":"/docs/web/markdown"}]},{"title":"Client","items":[{"title":"What is a client?","link":"/docs/client/client"},{"title":"iOS Client","link":"/docs/client/iOSClient"}]},{"title":"WebSockets","items":[{"title":"What are WebSockets?","link":"/docs/websockets/websockets"},{"title":"Echo Server","link":"/docs/websockets/echo-server"}]},{"title":"Deploying","items":[{"title":"Monitoring","link":"/docs/deploying/monitoring"},{"title":"Enabling SSL/TLS","link":"/docs/deploying/enabling-ssl"},{"title":"Docker","link":"/docs/deploying/docker"},{"title":"Kubernetes","link":"/docs/deploying/kubernetes"},{"title":"Cloud Foundry","link":"/docs/deploying/cloud-foundry"}]},{"title":"Configuring","items":[{"title":"Enabling SwiftNIO","link":"/docs/configuring/swiftnio"}]},{"title":"API","items":[{"title":"Kitura","link":"/docs/api/kitura"},{"title":"HTTP Client","link":"/docs/api/http-client"},{"title":"Sessions","link":"/docs/api/sessions"},{"title":"Authentication","link":"/docs/api/authentication"},{"title":"Web Templating","link":"/docs/api/web-templating"},{"title":"SQL Databases","link":"/docs/api/sql-databases"},{"title":"Non-SQL Databases","link":"/docs/api/non-sql-databases"},{"title":"Cloud Integration","link":"/docs/api/cloud-integration"},{"title":"Middlewares","link":"/docs/api/middlewares"},{"title":"Cryptography","link":"/docs/api/cryptography"},{"title":"Email","link":"/docs/api/email"}]}]}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}