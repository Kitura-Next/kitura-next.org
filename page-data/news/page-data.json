{"componentChunkName":"component---src-pages-news-js","path":"/news/","result":{"data":{"blogs":{"nodes":[{"html":"<h1 id=\"kitura-on-code-engine\"><a href=\"#kitura-on-code-engine\" aria-label=\"kitura on code engine permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura on Code Engine</h1>\n<h2 id=\"introduction\"><a href=\"#introduction\" aria-label=\"introduction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduction</h2>\n<p>IBM recently opens in beta the new <a href=\"https://cloud.ibm.com/codeengine/overview\">Code Engine</a>.\nIt is a new serverless approach, based on Kubernetes,\nthat runs docker images, or even build your own code,\nto run on the cloud.\nIt takes seconds, according to the docs,\nand not more than minutes, according to my tests, to go live!</p>\n<blockquote>\n<p>Today, we are gonna to launch this blog post, with Kitura, hosted on the Code Engine!</p>\n</blockquote>\n<p>Keep in mind, that the service is still in beta, and is not (yet) ready for production.\nIf you were not convinced by the warning,\nafter 7 days, your engine will be removed completely (thanks to the beta mode!).\nIs it then too early to try it? No!</p>\n<h2 id=\"kitura\"><a href=\"#kitura\" aria-label=\"kitura permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura</h2>\n<p>The first step will be to create a very simple Kitura server,\nto serve our Markdown content.</p>\n<p>Kitura recently move from an IBM-hosted project, to a community driven project.\nYou can see the announcement <a href=\"http://www.kitura.dev/blogs/announcing-kitura-community\">here</a>.\nIf you want to build something more complex or that suits more your needs,\nhave a look at the Kitura <a href=\"https://www.kitura.dev\">documentation</a>.\nIf you already have a Kitura application (or another...),\nyou can skip directly to the Host secion.</p>\n<p>The first step is to create the Kitura server:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> blog\n<span class=\"token builtin class-name\">cd</span> blog\nswift package init --type<span class=\"token operator\">=</span>executable</code></pre></div>\n<p>This creates a barebone skeleton of a Swift application.\nIf you were to type:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">swift run</code></pre></div>\n<p>The result would be: <code class=\"language-text\">Hello, world!</code>.\nEnjoy! It means your Swift environment is setup properly!</p>\n<p>Now, let's add Kitura to it!</p>\n<p>Add the following line to your <code class=\"language-text\">Package.swift</code></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/Kitura/Kitura\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2.9.1\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and don't forget to add Kitura as a dependency of the <code class=\"language-text\">blog</code> target.\nRun your code again: nothing is changing in the result, but a few packages are downloaded!</p>\n<h2 id=\"serve-pages\"><a href=\"#serve-pages\" aria-label=\"serve pages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serve page(s)</h2>\n<p>Kitura is now fully added to your application, and ready to be used.\nOpen the <code class=\"language-text\">main.swift</code> file, and replace its content by the simplest serving endpoint.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Kitura</span>\n\n<span class=\"token keyword\">let</span> router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Kitura</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHTTPServer</span><span class=\"token punctuation\">(</span>onPort<span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> router<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">Kitura</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Re-run the code. Your server is up and running, and waiting for requests.</p>\n<p>Open another terminal, and query your endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> localhost:8080</code></pre></div>\n<p>You should see the usual <code class=\"language-text\">Hello, world</code>, but this time served through a request!\nWhat an achievement for so few lines.\nFrom here on, feel free to play a bit with Kitura and add new routes if needed!\n(Again, the new documentation is <a href=\"https://www.kitura.dev\">here</a>)</p>\n<h2 id=\"markdown\"><a href=\"#markdown\" aria-label=\"markdown permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Markdown</h2>\n<p>We are serving this markdown document.\nThere is a lot of option, but\nKitura comes with a complete engine for that.\nIn order to serve Markdown into HTML, Kitura needs to use the Kitura-Markdown package.\nAdd the dependency in your <code class=\"language-text\">Package.swift</code> and in the target.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token punctuation\">.</span><span class=\"token function\">package</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"KituraMarkdown\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://github.com/Kitura/Kitura-Markdown\"</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.1.2\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we specify the name of the package, as it is problematic with the latest version of Swift.</p>\n<p>Now, create a <code class=\"language-text\">Views</code> folder on the top level directory, and add your Markdown file inside.</p>\n<p>Go to the <code class=\"language-text\">main.swift</code> file, and add a new route to server your new blog entry:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">router<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/code-engine\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">try</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code-engine.md\"</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Restart your server, and hit <code class=\"language-text\">http://localhost:8080/code-engine</code> from your favorite browser.\nYou should see your blog post fully served in HTML!</p>\n<blockquote>\n<p>If you want, you could also serve the article into the root endpoint.</p>\n</blockquote>\n<p>Add some customization to your page if you want, like syntax highliting and/or font/colors!</p>\n<h2 id=\"host\"><a href=\"#host\" aria-label=\"host permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Host</h2>\n<p>Let do the fun part: hosting on Code Engine.\nI will skip all the steps to create an IBM Cloud account, there is already many good tutorial, and it is quite simple.\nThe whole tutorial is eligible to the free tier, so you shouldn't have to pay to try it!</p>\n<p>I will use the CLI quite often, as it makes it easier to follow I think.\nIf you haven't installed the IBM Cloud CLI, you can do it <a href=\"https://cloud.ibm.com/docs/cli?topic=cli-install-ibmcloud-cli\">now</a>,\nand install the <a href=\"https://cloud.ibm.com/codeengine/cli\">Code Engine plugin</a>.\nI will move directly to the core part.</p>\n<blockquote>\n<p>Currently, Code Engine is only working on the US-South region.\nMake sure your environment is set properly before continuing:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud target -r us-south</code></pre></div>\n<blockquote>\n<p>You also need to be sure, that the Organization, Space and Resource group are set (or at least that you have one).</p>\n</blockquote>\n<p>When using Code Engine, you have 2 options: a Docker image or running from the source code.\nBoth use the same initial configuration that we will detailled here.</p>\n<p>For the Code Engine to work, we need a project to host it.\nThis can be create with the CLI easily:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce project create --name blog-ce\nibmcloud ce project <span class=\"token keyword\">select</span> --name blog-ce</code></pre></div>\n<p>If <code class=\"language-text\">select</code> is failing, it is because the project is not yet ready.\nYou can confirm its status by hitting:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce project get --name blog-ce</code></pre></div>\n<h3 id=\"docker-image\"><a href=\"#docker-image\" aria-label=\"docker image permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker image</h3>\n<h4 id=\"make-the-image\"><a href=\"#make-the-image\" aria-label=\"make the image permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Make the image</h4>\n<p>That's the easiest method: host an image somewhere and run it through Code Engine.\nFor Kitura, there is a 2 stages Docker process, that can be generated by the Kitura CLI if you use it.\nOtherwise, the Docker files are that simple:</p>\n<p>The <code class=\"language-text\">Dockerfile-tools</code>:\nIt is used to compile the code, with the compilation dependency in a bigger environment.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM swift:5.3\nLABEL maintainer=&quot;M. Barnachon&quot;\nLABEL Description=&quot;Dockerfile for the Blog Code Engine builder.&quot;\n\n# We can replace this port with what the user wants\nEXPOSE 8080\n\n# Default user if not provided\nARG bx_dev_user=root\nARG bx_dev_userid=1000\n\n# Include base Kitura dependencies\nRUN apt-get update &amp;&amp; apt-get install -y sudo libssl-dev libcurl4-openssl-dev locales locales-all libz-dev &amp;&amp; apt-get clean\n\n# Add utils files\nADD https://raw.githubusercontent.com/IBM-Swift/swift-ubuntu-docker/master/utils/tools-utils.sh /swift-utils/tools-utils.sh\nADD https://raw.githubusercontent.com/IBM-Swift/swift-ubuntu-docker/master/utils/common-utils.sh /swift-utils/common-utils.sh\nRUN chmod -R 755 /swift-utils\n\n# Create user if not root\nRUN if [ &quot;$bx_dev_user&quot; != root ]; then useradd -ms /bin/bash -u $bx_dev_userid $bx_dev_user; fi\n\n# Bundle application source &amp; binaries\nCOPY . /swift-project</code></pre></div>\n<p>The <code class=\"language-text\">Dockerfile</code>:\nIt is used to run your server in production mode.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM swift:5.3-slim\nLABEL maintainer=&quot;M. Barnachon&quot;\nLABEL Description=&quot;Dockerfile for the Blog Code Engine server.&quot;\n\n# We can replace this port with what the user wants\nEXPOSE 8080\n\n# Default user if not provided\nARG bx_dev_user=root\nARG bx_dev_userid=1000\n\n# Add utils files\nADD https://raw.githubusercontent.com/IBM-Swift/swift-ubuntu-docker/master/utils/run-utils.sh /swift-utils/run-utils.sh\nADD https://raw.githubusercontent.com/IBM-Swift/swift-ubuntu-docker/master/utils/common-utils.sh /swift-utils/common-utils.sh\nRUN chmod -R 755 /swift-utils\n\n# Create user if not root\nRUN if [ $bx_dev_user != &quot;root&quot; ]; then useradd -ms /bin/bash -u $bx_dev_userid $bx_dev_user; fi\n\n# Bundle application source &amp; binaries\nCOPY . /swift-project\n\n# Command to start Swift application\nCMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;cd /swift-project &amp;&amp; .build-ubuntu/release/blog-ce&quot; ]</code></pre></div>\n<p>Then, copy, build and run like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker build -t blog-ce-build -f Dockerfile-tools <span class=\"token builtin class-name\">.</span>\ndocker run -v <span class=\"token environment constant\">$PWD</span>:/swift-project -w /swift-project blog-ce-build /swift-utils/tools-utils.sh build release\ndocker build -t blog-ce-run --squash -f Dockerfile <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>Once your server image is build, you can host it on Docker Hub or the IBM registry.\nHere, we will be using the IBM cloud registry, as there is a free tier.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud cr login\nibmcloud cr namespace-add blog\ndocker tag blog-ce-run:latest blog-ce:0.0.1\ndocker tag blog-ce:0.0.1 us.icr.io/blog/blog-ce:0.0.1\ndocker push us.icr.io/blog/blog-ce:0.0.1</code></pre></div>\n<ol>\n<li>We log on the Container registry.</li>\n<li>We create a new namespace on the Container registry.</li>\n<li>We tag the image with the running name.</li>\n<li>We tag the image to be pushed on the Container registry.</li>\n<li>We push the image on the registry.</li>\n</ol>\n<h4 id=\"accessing-the-private-registry\"><a href=\"#accessing-the-private-registry\" aria-label=\"accessing the private registry permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Accessing the private registry</h4>\n<p>In that example, we are using a private registry.\nYou then need to grant access to that registry within Code Engine.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud iam api-key-create cliapikey -d <span class=\"token string\">\"My CLI API key\"</span> --file key_file\nibmcloud ce registry create --name blog --server us.icr.io --username iamapikey --password-from-file key_file</code></pre></div>\n<ol>\n<li>Creates an IAM API key to use with the Command Line Interface.</li>\n<li>Grant Code Engine the access to the Container registry.\nDon't forget to set the password into a file named <code class=\"language-text\">key_file</code>.\nThis step tends to fail for various reasons. In that case, go through the web UI, and add the registry manually when creating the application.</li>\n</ol>\n<blockquote>\n<p>The file `key_file, if used, should be excluded from the next Docker image creation!</p>\n</blockquote>\n<h4 id=\"create-the-application\"><a href=\"#create-the-application\" aria-label=\"create the application permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create the application</h4>\n<p>You are now ready to deploy your application.\nStill using the command line (if the step 2 did succeed for you),\ncreate a new application running your Kitura image:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce application create --name blog --image us.icr.io/blog:0.0.1</code></pre></div>\n<p>Monitor the status of your application with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce application list</code></pre></div>\n<p>Once it is running, you can query the URL with the detail access to the application:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ibmcloud ce application get -n blog</code></pre></div>\n<p>and point your browser to it!\nDon't forget to add the endpoint, if you have one, like <code class=\"language-text\">/code-engine</code>.</p>\n<p>Congratulation! Your new blog is online!</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>It was easy to host a simple page, using Kitura and IBM Code Engine.\nKeep in mind that this is still in beta phase, and it can break anytime.\nI actually re-try multiple times some commands, as they seems to failed for no obvious reason.\nMy go-to to fix it, was to remove completely the Code Engine project and redo all the steps.\nSometimes also, the command line is failing, but the web UI does work.\nAlternating the two, usually, allow me to succeed.</p>\n<p>We haven't detailed the build approach through Code Engine, as it involves solving the double Docker file approach.</p>\n<p>The source code (with extra adjustment) can be found <a href=\"https://github.com/mbarnach/blog-ce\">here</a>.</p>\n<p>I hope you've enjoyed that post, and feel free to play more with Kitura!</p>\n<p>Mathieu</p>","frontmatter":{"title":"Kitura on Code Engine","blurb":"Deploying Kitura on IBM Code Engine (Beta)","path":"/blogs/code-engine"}},{"html":"<p>We're pleased to announce the latest release of Kitura, as well as a new major version of the SwiftyRequest HTTP client. KituraKit, which is built on top of SwiftyRequest, has now been released at version 1.0.  Read on for some highlights for each of these releases:</p>\n<h2 id=\"kitura-29\"><a href=\"#kitura-29\" aria-label=\"kitura 29 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura 2.9</h2>\n<p>You can check out the <a href=\"https://github.com/Kitura-Next/Kitura/releases/tag/2.9.0\">release notes for Kitura 2.9</a> on GitHub. Features of this release are:</p>\n<h3 id=\"allow-customization-of-the-swaggerdocument-1483\"><a href=\"#allow-customization-of-the-swaggerdocument-1483\" aria-label=\"allow customization of the swaggerdocument 1483 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Allow customization of the SwaggerDocument (<a href=\"https://github.com/Kitura-Next/Kitura/pull/1483\">#1483</a>)</h3>\n<p>The OpenAPI document's title, description and version properties can now be specified:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> customDocument <span class=\"token operator\">=</span> <span class=\"token function\">SwaggerDocument</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"My Service\"</span><span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"A description\"</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span>apiDocument<span class=\"token punctuation\">:</span> customDocument<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"ability-to-limit-request-size-and-connection-count-1481\"><a href=\"#ability-to-limit-request-size-and-connection-count-1481\" aria-label=\"ability to limit request size and connection count 1481 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ability to limit request size and connection count (<a href=\"https://github.com/Kitura-Next/Kitura/pull/1481\">#1481</a>)</h3>\n<p>A Kitura server can now be configured to limit the number of concurrent connections it will accept, and to reject requests whose request body exceeds a certain size.  By default, 10,000 connections are permitted and a request body size of 100mb.  These values can be adjusted upon registering a server:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token function\">ServerOptions</span><span class=\"token punctuation\">(</span>requestSizeLimit<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> connectionLimit<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">Kitura</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHTTPServer</span><span class=\"token punctuation\">(</span>onPort<span class=\"token punctuation\">:</span> port<span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> router<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> options<span class=\"token punctuation\">)</span></code></pre></div>\n<p>See the <a href=\"https://kitura-next.github.io/Kitura-net/Structs/ServerOptions.html\">ServerOptions</a> documentation for more information.</p>\n<h2 id=\"swiftyrequest-30\"><a href=\"#swiftyrequest-30\" aria-label=\"swiftyrequest 30 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SwiftyRequest 3.0</h2>\n<p>SwiftyRequest provides a high-level HTTP client for making requests from your Swift application. This release represents a major re-working of the library to use swift-nio, via the async-http-client project currently under development by the Swift Server Working Group.</p>\n<p>An advantage of adopting swift-nio is that SwiftyRequest can now support client certificates (2-way SSL). To learn more about this feature, check out the <a href=\"https://github.com/Kitura-Next/SwiftyRequest/\">SwiftyRequest README</a> and the documentation for <a href=\"https://kitura-next.github.io/SwiftyRequest/Structs/ClientCertificate.html\">ClientCertificate</a>.</p>\n<p>Although there are a number of API changes in this release, much of the previous SwiftyRequest API has been preserved, to reduce the work required to migrate.</p>\n<h2 id=\"kiturakit-10\"><a href=\"#kiturakit-10\" aria-label=\"kiturakit 10 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KituraKit 1.0</h2>\n<p>KituraKit is a client-side library designed to mirror Kitura's Codable Routing API. KituraKit uses SwiftyRequest under the covers, and the 1.0 release provides some improvements such as better error reporting for cases where the server's response does not match the expected structure (a decoding error).</p>\n<p>A <a href=\"/docs/client/iOSClient\">new KituraKit guide</a> has been added to the kitura.io website demonstrating how KituraKit can be used to talk to a Kitura service.</p>","frontmatter":{"title":"Announcing Kitura 2.9, SwiftyRequest 3.0 and KituraKit 1.0","blurb":"We’re excited to announce the release of Kitura 2.9, alongside a number of other releases and improvements to the Kitura ecosystem.","path":"/blogs/announcing-kitura-2-9"}},{"html":"<p>We have just released <a href=\"https://github.com/Kitura-Next/SwiftKafka\">SwiftKafka</a>, a new Swift package for producing and consuming from an Apache Kafka distributed streaming platform. This blog post explains why you would use Apache Kafka, how you can use the Swift Kafka API and provides an example of producing and consuming messages.</p>\n<h2 id=\"what-is-apache-kafka\"><a href=\"#what-is-apache-kafka\" aria-label=\"what is apache kafka permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Apache Kafka?</h2>\n<p>Apache Kafka is a distributed event streaming platform capable of handling trillions of events a day. A streaming platform has three key capabilities:</p>\n<ul>\n<li>Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.</li>\n<li>Store streams of records in a fault-tolerant durable way.</li>\n<li>Process streams of records as they occur.</li>\n</ul>\n<p>Instead of sending messages directly from a producer to a consumer, Kafka stores streams of records in categories called topics. Producers add messages to a topic and consumers read messages from a topic. Producing and consuming from a stream is very cheap and works with Kafka’s built in distributed architecture. The result is a messaging system that is fast, fault tolerant and can handle high volumes of data.</p>\n<p>If you would like to learn more about Kafka, check out the <a href=\"https://kafka.apache.org/intro.html\">Apache Kafka website</a>.</p>\n<hr>\n<h2 id=\"swift-kafka\"><a href=\"#swift-kafka\" aria-label=\"swift kafka permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift Kafka</h2>\n<p>The new <a href=\"https://github.com/Kitura-Next/SwiftKafka\">SwiftKafka</a> library is built on top of the <a href=\"https://github.com/edenhill/librdkafka\">librdkafka</a> C library. This provides high performance messaging with an easy to use Swift API. Swift Kafka provides three classes that you will need to connect your application to event streams:</p>\n<h3 id=\"kafkaproducer\"><a href=\"#kafkaproducer\" aria-label=\"kafkaproducer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KafkaProducer</h3>\n<p>The <code class=\"language-text\">KafkaProducer</code> class produces messages to a Kafka server.</p>\n<p>Once you have initialized a KafkaProducer, you can call <code class=\"language-text\">connect(brokers:)</code> to connect to one or more Kafka servers.</p>\n<p>The producer can then call <code class=\"language-text\">send()</code> with a <code class=\"language-text\">KafkaProducerRecord</code>, which contains the following fields:</p>\n<ul>\n<li>Topic: The topic where the producer sends the record. If this topic doesn’t exist, the producer will try to create it.</li>\n<li>Value: The body of the message that will be sent with the record.</li>\n<li>Partition: The topic partition where the producer sends the record. If this is not set the server will automatically assign the partition.</li>\n<li>Key: If the partition is not set, the server will assign records with the same key to the same partition. Since order is guaranteed within a partition, these records will be consumed in the order they were produced.</li>\n</ul>\n<p>The message is sent to the connected brokers and the Kafka server stores the message on a partition of the topic.</p>\n<h3 id=\"kafkaconsumer\"><a href=\"#kafkaconsumer\" aria-label=\"kafkaconsumer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KafkaConsumer</h3>\n<p>The <code class=\"language-text\">KafkaConsumer</code> class consumes messages from a Kafka server.</p>\n<p>Once you have initialized a <code class=\"language-text\">KafkaConsumer</code>, you can call <code class=\"language-text\">connect(brokers:)</code> to connect to one or more Kafka servers.</p>\n<p>You can then subscribe to topics using <code class=\"language-text\">subscribe()</code>. This will distribute the topic partitions evenly between consumers with the same group id. If you do not set a group id, a random UUID will be used.</p>\n<p>Alternatively, you can use <code class=\"language-text\">assign()</code> to manually set the partition and offset where the consumer will consume from.</p>\n<p>Both <code class=\"language-text\">subscribe()</code> and <code class=\"language-text\">assign()</code> are asynchronous and will return immediately, however they may take up to sessionTimeoutMs (default 10 seconds) * 2 before the consumer connects and is assigned partitions.</p>\n<p>To consume messages from Kafka you call poll <code class=\"language-text\">(timeout:)</code>. This will poll Kafka, blocking for timeout seconds. When the function completes, you are returned an array of <code class=\"language-text\">KafkaConsumerRecord</code>, with the following fields:</p>\n<ul>\n<li>Value: The message value, if it can be UTF8 decoded to a String.</li>\n<li>ValueData: The message value as raw data.</li>\n<li>Key: The message key, if it can be UTF8 decoded to a String.</li>\n<li>KeyData: The message key as raw data.</li>\n<li>Offset: The message offset.</li>\n<li>Topic: The topic that the message was consumed from.</li>\n<li>Partition: The partition that the message was consumed from.</li>\n</ul>\n<p>When you have finished consuming, you can call <code class=\"language-text\">close()</code> to close the connection and unassign the consumer. The Kafka server then rebalances the unassigned partitions between other consumers in the group. If you don’t call <code class=\"language-text\">close()</code>, the consumer will be closed when the class is deallocated.</p>\n<h3 id=\"kafkaconfig\"><a href=\"#kafkaconfig\" aria-label=\"kafkaconfig permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KafkaConfig</h3>\n<p>The <code class=\"language-text\">KafkaConfig</code> class contains your settings for a Kafka consumer or Kafka producer. You pass an instance of this class to the Kafka client initializer to set its configuration.</p>\n<p>You initialize the class with default values, which you can change using the helper functions. For example, if you want to enable all logging, you would set the debug variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">KafkaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>debug <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">]</span></code></pre></div>\n<hr>\n<h2 id=\"swift-kafka-example\"><a href=\"#swift-kafka-example\" aria-label=\"swift kafka example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift Kafka Example</h2>\n<p>To demonstrate Swift Kafka, we are going to create a producer that reads user input and sends it to the Kafka server and a consumer that reads the message and prints it back to the user. The first thing we need is a Kafka server to connect to:</p>\n<h3 id=\"setting-up-a-kafka-server-mac\"><a href=\"#setting-up-a-kafka-server-mac\" aria-label=\"setting up a kafka server mac permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up a Kafka Server (Mac)</h3>\n<p>For macOS, we will use <a href=\"https://brew.sh\">Homebrew</a> to install and run the server:</p>\n<ol>\n<li>Install <code class=\"language-text\">librdkafka</code> (required to build SwiftKafka)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install librdkafka</code></pre></div>\n<ol start=\"2\">\n<li>Install Kafka server (and Java dependency)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew cask install java\n$ brew install kafka</code></pre></div>\n<ol start=\"3\">\n<li>Start the Zookeeper service</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew services start zookeeper</code></pre></div>\n<ol start=\"4\">\n<li>Start the Kafka service</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew services start kafka</code></pre></div>\n<p>These commands will install and run Zookeeper and Kafka as background services. Zookeeper is a centralized service that maintains information within distributed systems and is required by Kafka.</p>\n<hr>\n<h3 id=\"setting-up-a-kafka-server-linux\"><a href=\"#setting-up-a-kafka-server-linux\" aria-label=\"setting up a kafka server linux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up a Kafka Server (Linux)</h3>\n<p>On Linux, please follow the <a href=\"https://kafka.apache.org/quickstart\">Kafka quick start instructions</a> and <a href=\"https://github.com/edenhill/librdkafka#installing-prebuilt-packages\">install librdkafka</a>.</p>\n<hr>\n<h3 id=\"create-a-kafka-producer\"><a href=\"#create-a-kafka-producer\" aria-label=\"create a kafka producer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a Kafka Producer</h3>\n<p>We will create a simple producer that reads user input from the terminal and sends it to a Kafka topic using Swift Kafka.</p>\n<ol>\n<li>Create an executable Swift project</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir kafkaProducer\n$ cd kafkaProducer/\n$ swift package init --type executable</code></pre></div>\n<ol start=\"2\">\n<li>Add Swift Kafka</li>\n</ol>\n<p>Open your <code class=\"language-text\">Package.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ open Package.swift</code></pre></div>\n<p>Add Swift Kafka to your dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.package(url: &quot;https://github.com/Kitura-Next/SwiftKafka.git&quot;, from: &quot;0.0.0&quot;)</code></pre></div>\n<p>Then add <code class=\"language-text\">SwiftKafka</code> to your target dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.target(\n            name: &quot;kafkaProducer&quot;,\n            dependencies: [&quot;SwiftKafka&quot;]),</code></pre></div>\n<ol start=\"3\">\n<li>Add the <code class=\"language-text\">KafkaProducer</code> code</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/kafkaProducer/main.swift</code></pre></div>\n<p>Replace the code in this file with:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftKafka</span>\n\n<span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">KafkaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>brokerAddressFamily <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>v4\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token function\">KafkaProducer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">:</span> <span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected to <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>connection<span class=\"token delimiter variable\">)</span></span> brokers\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter message to produce to Kafka:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> userInput <span class=\"token operator\">=</span> <span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>producerRecord<span class=\"token punctuation\">:</span> <span class=\"token function\">KafkaProducerRecord</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">:</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> userInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">switch</span> result <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successfully produced: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">Any</span><span class=\"token delimiter variable\">)</span></span> to offset: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>offset<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to send message with error: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token punctuation\">.</span>description<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code will initialize a new KafkaProducer. We have configured our producer to only connect to brokers on IPv4 since we are running on localhost. We then connect to the Kafka server we started earlier on the default port of “9092”. The program will then read user input from the terminal and send it to the broker.</p>\n<p>You can test this out by running the program in terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ swift run</code></pre></div>\n<hr>\n<h3 id=\"create-a-kafka-consumer\"><a href=\"#create-a-kafka-consumer\" aria-label=\"create a kafka consumer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a Kafka Consumer</h3>\n<p>We will create a simple consumer that reads everything from a topic and prints it to the terminal.</p>\n<ol>\n<li>Create an executable Swift project</li>\n</ol>\n<p>We start by creating an executable Swift project using the same steps as above:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir kafkaConsumer\n$ cd kafkaConsumer/\n$ swift package init --type executable</code></pre></div>\n<ol start=\"2\">\n<li>Add Swift Kafka</li>\n</ol>\n<p>Open your <code class=\"language-text\">Package.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ open Package.swift</code></pre></div>\n<p>Add Swift Kafka to your dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.package(url: &quot;https://github.com/Kitura-Next/SwiftKafka.git&quot;, from: &quot;0.0.0&quot;)</code></pre></div>\n<p>Then add <code class=\"language-text\">SwiftKafka</code> to your target dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.target(\n            name: &quot;kafkaProducer&quot;,\n            dependencies: [&quot;SwiftKafka&quot;]),</code></pre></div>\n<ol start=\"3\">\n<li>Add the <code class=\"language-text\">KafkaConsumer</code> code</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/kafkaConsumer/main.swift</code></pre></div>\n<p>Replace the code in this file with:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftKafka</span>\n\n<span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">KafkaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>autoOffsetReset <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>beginning\nconfig<span class=\"token punctuation\">.</span>brokerAddressFamily <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>v4\nconfig<span class=\"token punctuation\">.</span>groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"exampleGroup\"</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">KafkaConsumer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">:</span> <span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected to <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>connection<span class=\"token delimiter variable\">)</span></span> brokers\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting for messages from Kafka:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> records <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> records <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consumed message: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">Any</span><span class=\"token delimiter variable\">)</span></span> from offset <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>offset<span class=\"token delimiter variable\">)</span></span>\"</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error thrown: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token punctuation\">.</span>localizedDescription<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code will initialize a new KafkaConsumer. We have configured our producer to only connect to brokers on IPv4 since we are running on localhost, to begin consuming from the start of all messages and to consume with a group id of “exampleGroup”. We then connect to the Kafka server we started earlier on the default port of “9092”. The program will then read messages from the “example” topic and print the message.</p>\n<p>You can test this out by running the program:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ swift run</code></pre></div>\n<p>Once the consumer connects to Kafka it should consume all the messages you sent from the producer and print them to the terminal.</p>\n<h2 id=\"next-steps\"><a href=\"#next-steps\" aria-label=\"next steps permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next steps</h2>\n<p>Congratulations! You have just set up an Apache Kafka event stream platform and connected a producer and consumer in Swift.</p>\n<p>If you would like learn more about SwiftKafka, <a href=\"https://github.com/Kitura-Next/SwiftKafka\">check it out on GitHub</a>.</p>\n<p>If you would like to learn more about using the SwiftKafka API, <a href=\"https://kitura-next.github.io/SwiftKafka/index.html\">visit our API reference</a>.</p>\n<p>Any questions or comments? Please join the Kitura community on <a href=\"http://swift-at-ibm-slack.mybluemix.net/?cm_sp=dw-bluemix-_-swift-_-devcenter&#x26;_ga=2.118803593.186671014.1570626561-1743126121.1570022962&#x26;cm_mc_uid=83263075142115698398229&#x26;cm_mc_sid_50200000=53695431570707266328\">Slack</a>!</p>","frontmatter":{"title":"Introducing SwiftKafka: Accessing Event Streams in Swift","blurb":"We have just released SwiftKafka, a new Swift package for producing and consuming from an Apache Kafka distributed streaming platform","path":"/blogs/swift-kafka-event-streams"}}]},"media":{"nodes":[{"frontmatter":{"title":"Server-side Swift with Kitura Book","blurb":"Chris Bailey and David Okun teamed up to create the first official Kitura book","path":"https://store.raywenderlich.com/products/server-side-swift-with-kitura"}},{"frontmatter":{"title":"ServerSide.swift 2018 - Berlin, Germany","blurb":"Pim Stolk and Ian Partridge present ING's journey using Kitura from idea to production","path":"https://www.youtube.com/watch?v=NZwTz8j5GXc"}},{"frontmatter":{"title":"Kitura - Live at try! Swift NYC","blurb":"Chris Bailey and Ian Partridge present how simple Swift services are at try! Swift NYC","path":"https://www.youtube.com/watch?v=tBogAmEzJCk"}},{"frontmatter":{"title":"try! Swift Tokyo 2019 - Building a Social Network in Swift","blurb":"Ian Partridge and David Okun will show how full-stack Swift is ready for your next project","path":"https://www.youtube.com/watch?v=5ciZS7Cxyp0"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}