{"componentChunkName":"component---src-pages-news-js","path":"/news/","result":{"data":{"blogs":{"nodes":[{"html":"<p>We're pleased to announce the latest release of Kitura, as well as a new major version of the SwiftyRequest HTTP client. KituraKit, which is built on top of SwiftyRequest, has now been released at version 1.0.  Read on for some highlights for each of these releases:</p>\n<h2 id=\"kitura-29\"><a href=\"#kitura-29\" aria-label=\"kitura 29 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kitura 2.9</h2>\n<p>You can check out the <a href=\"https://github.com/Kitura-Next/Kitura/releases/tag/2.9.0\">release notes for Kitura 2.9</a> on GitHub. Features of this release are:</p>\n<h3 id=\"allow-customization-of-the-swaggerdocument-1483\"><a href=\"#allow-customization-of-the-swaggerdocument-1483\" aria-label=\"allow customization of the swaggerdocument 1483 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Allow customization of the SwaggerDocument (<a href=\"https://github.com/Kitura-Next/Kitura/pull/1483\">#1483</a>)</h3>\n<p>The OpenAPI document's title, description and version properties can now be specified:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> customDocument <span class=\"token operator\">=</span> <span class=\"token function\">SwaggerDocument</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string\">\"My Service\"</span><span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">:</span> <span class=\"token string\">\"A description\"</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> router <span class=\"token operator\">=</span> <span class=\"token function\">Router</span><span class=\"token punctuation\">(</span>apiDocument<span class=\"token punctuation\">:</span> customDocument<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"ability-to-limit-request-size-and-connection-count-1481\"><a href=\"#ability-to-limit-request-size-and-connection-count-1481\" aria-label=\"ability to limit request size and connection count 1481 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ability to limit request size and connection count (<a href=\"https://github.com/Kitura-Next/Kitura/pull/1481\">#1481</a>)</h3>\n<p>A Kitura server can now be configured to limit the number of concurrent connections it will accept, and to reject requests whose request body exceeds a certain size.  By default, 10,000 connections are permitted and a request body size of 100mb.  These values can be adjusted upon registering a server:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token function\">ServerOptions</span><span class=\"token punctuation\">(</span>requestSizeLimit<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> connectionLimit<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">Kitura</span><span class=\"token punctuation\">.</span><span class=\"token function\">addHTTPServer</span><span class=\"token punctuation\">(</span>onPort<span class=\"token punctuation\">:</span> port<span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> router<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">:</span> options<span class=\"token punctuation\">)</span></code></pre></div>\n<p>See the <a href=\"http://ibm-swift.github.io/Kitura-net/Structs/ServerOptions.html\"><code class=\"language-text\">ServerOptions</code></a> documentation for more information.</p>\n<h2 id=\"swiftyrequest-30\"><a href=\"#swiftyrequest-30\" aria-label=\"swiftyrequest 30 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SwiftyRequest 3.0</h2>\n<p>SwiftyRequest provides a high-level HTTP client for making requests from your Swift application. This release represents a major re-working of the library to use swift-nio, via the async-http-client project currently under development by the Swift Server Working Group.</p>\n<p>An advantage of adopting swift-nio is that SwiftyRequest can now support client certificates (2-way SSL). To learn more about this feature, check out the <a href=\"https://github.com/Kitura-Next/SwiftyRequest/\">SwiftyRequest README</a> and the documentation for <a href=\"https://ibm-swift.github.io/SwiftyRequest/Structs/ClientCertificate.html\"><code class=\"language-text\">ClientCertificate</code></a>.</p>\n<p>Although there are a number of API changes in this release, much of the previous SwiftyRequest API has been preserved, to reduce the work required to migrate.</p>\n<h2 id=\"kiturakit-10\"><a href=\"#kiturakit-10\" aria-label=\"kiturakit 10 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KituraKit 1.0</h2>\n<p>KituraKit is a client-side library designed to mirror Kitura's Codable Routing API. KituraKit uses SwiftyRequest under the covers, and the 1.0 release provides some improvements such as better error reporting for cases where the server's response does not match the expected structure (a decoding error).</p>\n<p>A <a href=\"/docs/client/iOSClient\">new KituraKit guide</a> has been added to the kitura.io website demonstrating how KituraKit can be used to talk to a Kitura service.</p>","frontmatter":{"title":"Announcing Kitura 2.9, SwiftyRequest 3.0 and KituraKit 1.0","blurb":"We’re excited to announce the release of Kitura 2.9, alongside a number of other releases and improvements to the Kitura ecosystem.","path":"/blogs/announcing-kitura-2-9"}},{"html":"<p>We have just released <a href=\"https://github.com/Kitura-Next/SwiftKafka\">SwiftKafka</a>, a new Swift package for producing and consuming from an Apache Kafka distributed streaming platform. This blog post explains why you would use Apache Kafka, how you can use the Swift Kafka API and provides an example of producing and consuming messages.</p>\n<h2 id=\"what-is-apache-kafka\"><a href=\"#what-is-apache-kafka\" aria-label=\"what is apache kafka permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is Apache Kafka?</h2>\n<p>Apache Kafka is a distributed event streaming platform capable of handling trillions of events a day. A streaming platform has three key capabilities:</p>\n<ul>\n<li>Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.</li>\n<li>Store streams of records in a fault-tolerant durable way.</li>\n<li>Process streams of records as they occur.</li>\n</ul>\n<p>Instead of sending messages directly from a producer to a consumer, Kafka stores streams of records in categories called topics. Producers add messages to a topic and consumers read messages from a topic. Producing and consuming from a stream is very cheap and works with Kafka’s built in distributed architecture. The result is a messaging system that is fast, fault tolerant and can handle high volumes of data.</p>\n<p>If you would like to learn more about Kafka, check out the <a href=\"https://kafka.apache.org/intro.html\">Apache Kafka website</a>.</p>\n<hr>\n<h2 id=\"swift-kafka\"><a href=\"#swift-kafka\" aria-label=\"swift kafka permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift Kafka</h2>\n<p>The new <a href=\"https://github.com/Kitura-Next/SwiftKafka\">SwiftKafka</a> library is built on top of the <a href=\"https://github.com/edenhill/librdkafka\">librdkafka</a> C library. This provides high performance messaging with an easy to use Swift API. Swift Kafka provides three classes that you will need to connect your application to event streams:</p>\n<h3 id=\"kafkaproducer\"><a href=\"#kafkaproducer\" aria-label=\"kafkaproducer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KafkaProducer</h3>\n<p>The <code class=\"language-text\">KafkaProducer</code> class produces messages to a Kafka server.</p>\n<p>Once you have initialized a KafkaProducer, you can call <code class=\"language-text\">connect(brokers:)</code> to connect to one or more Kafka servers.</p>\n<p>The producer can then call <code class=\"language-text\">send()</code> with a <code class=\"language-text\">KafkaProducerRecord</code>, which contains the following fields:</p>\n<ul>\n<li>Topic: The topic where the producer sends the record. If this topic doesn’t exist, the producer will try to create it.</li>\n<li>Value: The body of the message that will be sent with the record.</li>\n<li>Partition: The topic partition where the producer sends the record. If this is not set the server will automatically assign the partition.</li>\n<li>Key: If the partition is not set, the server will assign records with the same key to the same partition. Since order is guaranteed within a partition, these records will be consumed in the order they were produced.</li>\n</ul>\n<p>The message is sent to the connected brokers and the Kafka server stores the message on a partition of the topic.</p>\n<h3 id=\"kafkaconsumer\"><a href=\"#kafkaconsumer\" aria-label=\"kafkaconsumer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KafkaConsumer</h3>\n<p>The <code class=\"language-text\">KafkaConsumer</code> class consumes messages from a Kafka server.</p>\n<p>Once you have initialized a <code class=\"language-text\">KafkaConsumer</code>, you can call <code class=\"language-text\">connect(brokers:)</code> to connect to one or more Kafka servers.</p>\n<p>You can then subscribe to topics using <code class=\"language-text\">subscribe()</code>. This will distribute the topic partitions evenly between consumers with the same group id. If you do not set a group id, a random UUID will be used.</p>\n<p>Alternatively, you can use <code class=\"language-text\">assign()</code> to manually set the partition and offset where the consumer will consume from.</p>\n<p>Both <code class=\"language-text\">subscribe()</code> and <code class=\"language-text\">assign()</code> are asynchronous and will return immediately, however they may take up to sessionTimeoutMs (default 10 seconds) * 2 before the consumer connects and is assigned partitions.</p>\n<p>To consume messages from Kafka you call poll <code class=\"language-text\">(timeout:)</code>. This will poll Kafka, blocking for timeout seconds. When the function completes, you are returned an array of <code class=\"language-text\">KafkaConsumerRecord</code>, with the following fields:</p>\n<ul>\n<li>Value: The message value, if it can be UTF8 decoded to a String.</li>\n<li>ValueData: The message value as raw data.</li>\n<li>Key: The message key, if it can be UTF8 decoded to a String.</li>\n<li>KeyData: The message key as raw data.</li>\n<li>Offset: The message offset.</li>\n<li>Topic: The topic that the message was consumed from.</li>\n<li>Partition: The partition that the message was consumed from.</li>\n</ul>\n<p>When you have finished consuming, you can call <code class=\"language-text\">close()</code> to close the connection and unassign the consumer. The Kafka server then rebalances the unassigned partitions between other consumers in the group. If you don’t call <code class=\"language-text\">close()</code>, the consumer will be closed when the class is deallocated.</p>\n<h3 id=\"kafkaconfig\"><a href=\"#kafkaconfig\" aria-label=\"kafkaconfig permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>KafkaConfig</h3>\n<p>The <code class=\"language-text\">KafkaConfig</code> class contains your settings for a Kafka consumer or Kafka producer. You pass an instance of this class to the Kafka client initializer to set its configuration.</p>\n<p>You initialize the class with default values, which you can change using the helper functions. For example, if you want to enable all logging, you would set the debug variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">KafkaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>debug <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>all<span class=\"token punctuation\">]</span></code></pre></div>\n<hr>\n<h2 id=\"swift-kafka-example\"><a href=\"#swift-kafka-example\" aria-label=\"swift kafka example permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swift Kafka Example</h2>\n<p>To demonstrate Swift Kafka, we are going to create a producer that reads user input and sends it to the Kafka server and a consumer that reads the message and prints it back to the user. The first thing we need is a Kafka server to connect to:</p>\n<h3 id=\"setting-up-a-kafka-server-mac\"><a href=\"#setting-up-a-kafka-server-mac\" aria-label=\"setting up a kafka server mac permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up a Kafka Server (Mac)</h3>\n<p>For macOS, we will use <a href=\"https://brew.sh\">Homebrew</a> to install and run the server:</p>\n<ol>\n<li>Install <code class=\"language-text\">librdkafka</code> (required to build SwiftKafka)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install librdkafka</code></pre></div>\n<ol start=\"2\">\n<li>Install Kafka server (and Java dependency)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew cask install java\n$ brew install kafka</code></pre></div>\n<ol start=\"3\">\n<li>Start the Zookeeper service</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew services start zookeeper</code></pre></div>\n<ol start=\"4\">\n<li>Start the Kafka service</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew services start kafka</code></pre></div>\n<p>These commands will install and run Zookeeper and Kafka as background services. Zookeeper is a centralized service that maintains information within distributed systems and is required by Kafka.</p>\n<hr>\n<h3 id=\"setting-up-a-kafka-server-linux\"><a href=\"#setting-up-a-kafka-server-linux\" aria-label=\"setting up a kafka server linux permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up a Kafka Server (Linux)</h3>\n<p>On Linux, please follow the <a href=\"https://kafka.apache.org/quickstart\">Kafka quick start instructions</a> and <a href=\"https://github.com/edenhill/librdkafka#installing-prebuilt-packages\">install librdkafka</a>.</p>\n<hr>\n<h3 id=\"create-a-kafka-producer\"><a href=\"#create-a-kafka-producer\" aria-label=\"create a kafka producer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a Kafka Producer</h3>\n<p>We will create a simple producer that reads user input from the terminal and sends it to a Kafka topic using Swift Kafka.</p>\n<ol>\n<li>Create an executable Swift project</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir kafkaProducer\n$ cd kafkaProducer/\n$ swift package init --type executable</code></pre></div>\n<ol start=\"2\">\n<li>Add Swift Kafka</li>\n</ol>\n<p>Open your <code class=\"language-text\">Package.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ open Package.swift</code></pre></div>\n<p>Add Swift Kafka to your dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.package(url: &quot;https://github.com/Kitura-Next/SwiftKafka.git&quot;, from: &quot;0.0.0&quot;)</code></pre></div>\n<p>Then add <code class=\"language-text\">SwiftKafka</code> to your target dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.target(\n            name: &quot;kafkaProducer&quot;,\n            dependencies: [&quot;SwiftKafka&quot;]),</code></pre></div>\n<ol start=\"3\">\n<li>Add the <code class=\"language-text\">KafkaProducer</code> code</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/kafkaProducer/main.swift</code></pre></div>\n<p>Replace the code in this file with:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftKafka</span>\n\n<span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">KafkaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>brokerAddressFamily <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>v4\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> producer <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token function\">KafkaProducer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> producer<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">:</span> <span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected to <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>connection<span class=\"token delimiter variable\">)</span></span> brokers\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter message to produce to Kafka:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> userInput <span class=\"token operator\">=</span> <span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>producerRecord<span class=\"token punctuation\">:</span> <span class=\"token function\">KafkaProducerRecord</span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">:</span> <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> userInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result <span class=\"token keyword\">in</span>\n                <span class=\"token keyword\">switch</span> result <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Successfully produced: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">Any</span><span class=\"token delimiter variable\">)</span></span> to offset: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>offset<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span><span class=\"token function\">failure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to send message with error: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token punctuation\">.</span>description<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code will initialize a new KafkaProducer. We have configured our producer to only connect to brokers on IPv4 since we are running on localhost. We then connect to the Kafka server we started earlier on the default port of “9092”. The program will then read user input from the terminal and send it to the broker.</p>\n<p>You can test this out by running the program in terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ swift run</code></pre></div>\n<hr>\n<h3 id=\"create-a-kafka-consumer\"><a href=\"#create-a-kafka-consumer\" aria-label=\"create a kafka consumer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a Kafka Consumer</h3>\n<p>We will create a simple consumer that reads everything from a topic and prints it to the terminal.</p>\n<ol>\n<li>Create an executable Swift project</li>\n</ol>\n<p>We start by creating an executable Swift project using the same steps as above:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir kafkaConsumer\n$ cd kafkaConsumer/\n$ swift package init --type executable</code></pre></div>\n<ol start=\"2\">\n<li>Add Swift Kafka</li>\n</ol>\n<p>Open your <code class=\"language-text\">Package.swift</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ open Package.swift</code></pre></div>\n<p>Add Swift Kafka to your dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.package(url: &quot;https://github.com/Kitura-Next/SwiftKafka.git&quot;, from: &quot;0.0.0&quot;)</code></pre></div>\n<p>Then add <code class=\"language-text\">SwiftKafka</code> to your target dependencies.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.target(\n            name: &quot;kafkaProducer&quot;,\n            dependencies: [&quot;SwiftKafka&quot;]),</code></pre></div>\n<ol start=\"3\">\n<li>Add the <code class=\"language-text\">KafkaConsumer</code> code</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">open Sources/kafkaConsumer/main.swift</code></pre></div>\n<p>Replace the code in this file with:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftKafka</span>\n\n<span class=\"token keyword\">let</span> config <span class=\"token operator\">=</span> <span class=\"token function\">KafkaConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>autoOffsetReset <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>beginning\nconfig<span class=\"token punctuation\">.</span>brokerAddressFamily <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>v4\nconfig<span class=\"token punctuation\">.</span>groupId <span class=\"token operator\">=</span> <span class=\"token string\">\"exampleGroup\"</span>\n<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> consumer <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token function\">KafkaConsumer</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">:</span> config<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> connection <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">:</span> <span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connected to <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>connection<span class=\"token delimiter variable\">)</span></span> brokers\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting for messages from Kafka:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>topics<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> records <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> record <span class=\"token keyword\">in</span> records <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consumed message: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> <span class=\"token builtin\">Any</span><span class=\"token delimiter variable\">)</span></span> from offset <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>record<span class=\"token punctuation\">.</span>offset<span class=\"token delimiter variable\">)</span></span>\"</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error thrown: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>error<span class=\"token punctuation\">.</span>localizedDescription<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This code will initialize a new KafkaConsumer. We have configured our producer to only connect to brokers on IPv4 since we are running on localhost, to begin consuming from the start of all messages and to consume with a group id of “exampleGroup”. We then connect to the Kafka server we started earlier on the default port of “9092”. The program will then read messages from the “example” topic and print the message.</p>\n<p>You can test this out by running the program:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ swift run</code></pre></div>\n<p>Once the consumer connects to Kafka it should consume all the messages you sent from the producer and print them to the terminal.</p>\n<h2 id=\"next-steps\"><a href=\"#next-steps\" aria-label=\"next steps permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next steps</h2>\n<p>Congratulations! You have just set up an Apache Kafka event stream platform and connected a producer and consumer in Swift.</p>\n<p>If you would like learn more about SwiftKafka, <a href=\"https://github.com/Kitura-Next/SwiftKafka\">check it out on GitHub</a>.</p>\n<p>If you would like to learn more about using the SwiftKafka API, <a href=\"https://ibm-swift.github.io/SwiftKafka/index.html\">visit our API reference</a>.</p>\n<p>Any questions or comments? Please join the Kitura community on <a href=\"http://swift-at-ibm-slack.mybluemix.net/?cm_sp=dw-bluemix-_-swift-_-devcenter&#x26;_ga=2.118803593.186671014.1570626561-1743126121.1570022962&#x26;cm_mc_uid=83263075142115698398229&#x26;cm_mc_sid_50200000=53695431570707266328\">Slack</a>!</p>","frontmatter":{"title":"Introducing SwiftKafka: Accessing Event Streams in Swift","blurb":"We have just released SwiftKafka, a new Swift package for producing and consuming from an Apache Kafka distributed streaming platform","path":"/blogs/swift-kafka-event-streams"}},{"html":"<p>With the release of <a href=\"https://github.com/Kitura-Next/KituraKit/releases/tag/0.0.24\">KituraKit 0.0.24</a>, it is now possible to make type-safe requests to a Kitura server using a JWT for authentication. In addition, we’d like to introduce <a href=\"https://github.com/Kitura-Next/Kitura-CredentialsJWT\">Kitura-CredentialsJWT</a>, which provides a convenient way to add JWT authentication to Codable routes.</p>\n<p>In a previous blog post <a href=\"/blogs/swift-jwt-3-0-codable-json-web-tokens\">Swift JWT 3.0: Codable JSON web tokens</a>, we outlined the code for implementing JWT authentication in Kitura for Codable routes. In this post, we’ll show how KituraKit makes it easy to perform type-safe requests to APIs requiring JWT authentication, and how Kitura-CredentialsJWT reduces the boilerplate required on the server side.</p>\n<h2 id=\"what-is-a-json-web-token\"><a href=\"#what-is-a-json-web-token\" aria-label=\"what is a json web token permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a JSON Web Token?</h2>\n<p>In short, a JWT is a small JSON payload consisting of a Header object, a Claims object and a signature. They are a self-contained way for securely transmitting information between parties. If you would like to know more about JWTs, check out <a href=\"https://jwt.io\">jwt.io</a>.</p>\n<hr>\n<h2 id=\"setting-up-jwt-authentication-using-kiturakit\"><a href=\"#setting-up-jwt-authentication-using-kiturakit\" aria-label=\"setting up jwt authentication using kiturakit permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up JWT authentication using KituraKit</h2>\n<p>Sending a JWT for authentication is simple: attach a <code class=\"language-text\">JWTCredentials</code> to your request, as in this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">// Replace with a valid JWT string: three base64-encoded values separated by full stops.</span>\n<span class=\"token keyword\">let</span> jwtString <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;my_jwt_token_string>\"</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/protected\"</span><span class=\"token punctuation\">,</span> credentials<span class=\"token punctuation\">:</span> <span class=\"token function\">JWTCredentials</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">:</span> jwtString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">:</span> <span class=\"token builtin\">User</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> user <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to access protected resource\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User obtained: <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>user<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Under the covers, KituraKit will send your token in an <code class=\"language-text\">Authorization: Bearer &lt;token&gt;</code> header. When Kitura receives a request to the protected route, it will verify the token’s signature, and can then choose whether the JWT permits access to that resource based on its claims.</p>\n<h2 id=\"server-side-authentication-using-kitura-credentialsjwt\"><a href=\"#server-side-authentication-using-kitura-credentialsjwt\" aria-label=\"server side authentication using kitura credentialsjwt permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server-side authentication using Kitura-CredentialsJWT</h2>\n<p>In a previous blog post <a href=\"/blogs/type-safe-authentication-using-oauth-tokens\">Type-Safe Authentication using OAuth tokens</a>, we introduced the TypeSafeCredentials protocol as part of Kitura-Credentials, and with it a number of initial implementations: <code class=\"language-text\">TypeSafeGoogleToken</code>, <code class=\"language-text\">TypeSafeFacebookToken</code> and <code class=\"language-text\">TypeSafeHTTPBasic</code>.</p>\n<p>We’ve released 0.0.1 of <a href=\"https://github.com/Kitura-Next/Kitura-CredentialsJWT\">Kitura-CredentialsJWT</a>, which extends the <code class=\"language-text\">JWT</code> type to conform to TypeSafeMiddleware. This means that you can include it in your Codable route handler as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftJWT</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsJWT</span>\n\n<span class=\"token comment\">// Define the claims that must appear in the JWT</span>\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyClaims</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Claims</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Subject's id (e.g. name)</span>\n    <span class=\"token keyword\">let</span> sub<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Set up TypeSafeJWT by specifying the method for verifying a JWT signature</span>\n<span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;PrivateKey>\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n<span class=\"token builtin\">TypeSafeJWT</span><span class=\"token punctuation\">.</span>verifier <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token function\">hs256</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> key<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Use the JWT type as a Type-Safe Middleware to protect a route. The handler</span>\n<span class=\"token comment\">// will only be invoked if the JWT can be successfully verified, and contains</span>\n<span class=\"token comment\">// the required claims.</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/protected\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">(</span>jwt<span class=\"token punctuation\">:</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MyClaims</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> respondWith<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">User</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">RequestError</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Void</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n    <span class=\"token comment\">// (Decide whether to permit the user access to this resource, based on the JWT claims)</span>\n    <span class=\"token comment\">// Send the requested resource:</span>\n    <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> jwt<span class=\"token punctuation\">.</span>claims<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token constant\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that, compared to the example in our previous post, there is no longer a requirement to implement the TypeSafeMiddleware protocol yourself. We just need to bootstrap the TypeSafeJWT configuration with a method (and key) for validating incoming JWTs.</p>\n<p>The TypeSafeJWT type also provides a basic token cache facility, which can remember previously validated JWTs to reduce the computational overhead of verifying the same JWT repeatedly.</p>\n<hr>\n<h2 id=\"using-jwts-alongside-other-authentication-methods\"><a href=\"#using-jwts-alongside-other-authentication-methods\" aria-label=\"using jwts alongside other authentication methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using JWTs alongside other authentication methods</h2>\n<p>In addition, you can use JWT authentication as part of Kitura-Credentials’ <code class=\"language-text\">TypeSafeMultiCredentials</code>, which allows a single route handler to accept multiple types of authentication. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token builtin\">Credentials</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">CredentialsJWT</span>\n<span class=\"token keyword\">import</span> <span class=\"token builtin\">SwiftJWT</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token builtin\">MyMultiAuthedUser</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeMultiCredentials</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>            <span class=\"token comment\">// Protocol requirement</span>\n    <span class=\"token keyword\">let</span> provider<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>      <span class=\"token comment\">// Protocol requirement</span>\n    <span class=\"token keyword\">let</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>          <span class=\"token comment\">// Custom property</span>\n\n    <span class=\"token comment\">// Acceptable methods of authentication: Google token, JWT and HTTP Basic</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> authenticationMethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">TypeSafeCredentials</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">Type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">MyGoogleUser</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">MyBasicAuth</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MyClaims</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>successfulAuth<span class=\"token punctuation\">:</span> <span class=\"token builtin\">TypeSafeCredentials</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> successfulAuth<span class=\"token punctuation\">.</span>id\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>provider <span class=\"token operator\">=</span> successfulAuth<span class=\"token punctuation\">.</span>provider\n\n        <span class=\"token comment\">// Initialize additional properties based on authentication type.</span>\n        <span class=\"token keyword\">switch</span> successfulAuth <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> googleToken <span class=\"token keyword\">as</span> <span class=\"token builtin\">GoogleTokenProfile</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> googleToken<span class=\"token punctuation\">.</span>name\n        <span class=\"token keyword\">case</span> <span class=\"token keyword\">let</span> jwt <span class=\"token keyword\">as</span> <span class=\"token constant\">JWT</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">MyClaims</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>claims<span class=\"token punctuation\">.</span>sub\n        <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">// HTTP Basic</span>\n            <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> successfulAuth<span class=\"token punctuation\">.</span>id\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">MyMultiAuthedUser</code> type can then be used in place of <code class=\"language-text\">JWT</code> in your handler. (Note: the implementation of MyGoogleUser and MyBasicAuth is omitted here for brevity but more details can be found in the Multiple authentication methods section of <a href=\"/blogs/type-safe-authentication-using-oauth-tokens\">Type-Safe Authentication using OAuth tokens</a>.</p>\n<p>For more details, you can check out the code at the <a href=\"https://github.com/Kitura-Next/Kitura-CredentialsJWT\">Kitura-Next/Kitura-CredentialsJWT project</a> on GitHub, and the API documentation on <a href=\"http://kitura.io\">Kitura.io</a>, and you are welcome to discuss the project by <a href=\"http://swift-at-ibm-slack.mybluemix.net/?cm_sp=dw-bluemix-_-swift-_-devcenter&#x26;cm_sp=dw-bluemix-_-swift-_-devcenter&#x26;cm_mc_uid=83263075142115698398229&#x26;cm_mc_sid_50200000=53695431570707266328&#x26;_ga=2.114805639.186671014.1570626561-1743126121.1570022962\">joining our Slack community</a>. As always, feedback and contributions are welcomed!</p>","frontmatter":{"title":"JWT authentication using KituraKit","blurb":"With the release of KituraKit 0.0.24, it is now possible to make type-safe requests to a Kitura server using a JWT for authentication","path":"/blogs/jwt-authentication-using-kiturakit"}}]},"media":{"nodes":[{"frontmatter":{"title":"Server-side Swift with Kitura Book","blurb":"Chris Bailey and David Okun teamed up to create the first official Kitura book","path":"https://store.raywenderlich.com/products/server-side-swift-with-kitura"}},{"frontmatter":{"title":"ServerSide.swift 2018 - Berlin, Germany","blurb":"Pim Stolk and Ian Partridge present ING's journey using Kitura from idea to production","path":"https://www.youtube.com/watch?v=NZwTz8j5GXc"}},{"frontmatter":{"title":"Kitura - Live at try! Swift NYC","blurb":"Chris Bailey and Ian Partridge present how simple Swift services are at try! Swift NYC","path":"https://www.youtube.com/watch?v=tBogAmEzJCk"}},{"frontmatter":{"title":"try! Swift Tokyo 2019 - Building a Social Network in Swift","blurb":"Ian Partridge and David Okun will show how full-stack Swift is ready for your next project","path":"https://www.youtube.com/watch?v=5ciZS7Cxyp0"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}